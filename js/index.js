// Generated by CoffeeScript 1.7.1
(function() {
  console.log("waiting...");

  $(document).ready(function() {
    var best, canvas, context, current, frame, height, imageDistance, last_frame, original, randomColor, randomPoint, runtime, setGradient, setupImage, setupStage, setupVideo, stageReady, stopped, triangleCount, trianglesKept, verbose, width;
    console.log("setting up...");
    imageDistance = function(a, b) {
      var i, sum, x, y, z, _i, _ref;
      sum = 0 | 0;
      for (i = _i = 0, _ref = Math.min(a.length, b.length); _i < _ref; i = _i += 1) {
        x = a[i] | 0;
        y = b[i] | 0;
        z = (x - y) | 0;
        sum += Math.pow(z, 2) | 0;
      }
      return Math.sqrt(sum) | 0;
    };
    original = best = current = null;
    stopped = false;
    width = height = 0;
    canvas = $.synth("canvas.stop").prependTo("body");
    context = canvas.first().getContext('2d');
    context.clear = function(c) {
      if (c == null) {
        c = 'black';
      }
      this.fillStyle = c;
      return this.fillRect(0, 0, width, height);
    };
    randomPoint = function() {
      return $($.random.integer(0, width), $.random.integer(0, height));
    };
    randomColor = function() {
      return "rgba(" + ($.random.integer(0, 256)) + "," + ($.random.integer(0, 256)) + "," + ($.random.integer(0, 256)) + ", .5)";
    };
    triangleCount = 0;
    context.randomTriangle = function() {
      var a, offset;
      triangleCount += 1;
      offset = randomPoint().scale(.85);
      this.beginPath();
      this.moveTo.apply(this, (a = randomPoint().scale(.15).plus(offset)));
      this.lineTo.apply(this, randomPoint().scale(.15).plus(offset));
      this.lineTo.apply(this, randomPoint().scale(.15).plus(offset));
      this.lineTo.apply(this, a);
      this.closePath();
      this.fillStyle = randomColor();
      return this.fill();
    };
    setupVideo = function(cb) {
      var onError, onVideo;
      navigator.getUserMedia || (navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
      if (!navigator.getUserMedia) {
        return cb("unsupported", null);
      }
      onVideo = function(stream) {
        var video;
        $.log("onVideo", stream);
        video = $.synth("video[width=320][height=240]").attr('src', URL.createObjectURL(stream)).prependTo("body").first();
        return video.addEventListener('loadedmetadata', function(evt) {
          var _ref;
          $.log("on loadedmetadata", evt);
          video.play();
          _ref = [320, 240], width = _ref[0], height = _ref[1];
          canvas.attr({
            width: width,
            height: height
          });
          context = canvas.first().getContext('2d');
          return $.delay(1000, function() {
            $.log("Drawing to canvas", video);
            video.pause();
            context.drawImage(video, 0, 0, width, height);
            cb(null, video);
            return $("video").remove();
          });
        });
      };
      onError = function(err) {
        return cb(err, null);
      };
      return navigator.getUserMedia({
        video: true
      }, onVideo, onError);
    };
    setupImage = function(cb) {
      return $.Promise.image("earring.jpg").wait(function(err, image) {
        if (err != null) {
          return cb(err, null);
        }
        $(image).attr({
          width: 320,
          height: 240
        }).prependTo("body");
        width = image.width, height = image.height;
        canvas.attr({
          width: width,
          height: height
        });
        context.drawImage(image, 0, 0, width, height);
        return cb(null, image);
      });
    };
    trianglesKept = 0;
    runtime = 0;
    last_frame = 0;
    frame = function() {
      var dt;
      if (stopped) {
        return;
      }
      dt = $.now - last_frame;
      runtime += dt;
      last_frame += dt;
      context.randomTriangle();
      return $.delay(0, function() {
        current = context.getImageData(0, 0, width, height);
        current.dist = imageDistance(current.data, original.data);
        if (current.dist < best.dist) {
          best = current;
          window.setProgress(best.dist, original.dist);
          trianglesKept += 1;
        }
        context.putImageData(best, 0, 0);
        if (best.dist > 100 && !stopped) {
          return setTimeout(frame, 0);
        }
      });
    };
    stageReady = function() {
      $.log("Stage is ready.");
      original = context.getImageData(0, 0, width, height);
      context.clear('white');
      best = current = context.getImageData(0, 0, width, height);
      original.dist = best.dist = imageDistance(best.data, original.data);
      $(".stop").click(function() {
        stopped = !stopped;
        if (!stopped) {
          setTimeout(frame, 0);
          return last_frame = $.now;
        } else {
          return $("#progress").text("Paused");
        }
      });
      setTimeout(frame, 0);
      return last_frame = $.now;
    };
    (setupStage = function() {
      return setupVideo(function(err, video) {
        $.log("setupVideo ->", err, video);
        if (err != null) {
          return setupImage(function(err, image) {
            $.log("setupImage ->", err, image);
            if (err == null) {
              stageReady();
            }
            return $("img").hide();
          });
        } else {
          return stageReady();
        }
      });
    })();
    setGradient = function(selector, pct, opts) {
      var node, prefix, text, _i, _len, _ref;
      opts = $.extend({
        fg: 'green',
        bg: 'white'
      }, opts);
      node = $(selector);
      text = "linear-gradient(right, " + opts.fg + " 0%, " + opts.fg + " " + pct + "%, " + opts.bg + " " + pct + "%, " + opts.bg + " 100%)";
      _ref = ["-webkit-", "-moz-", "-o-", "-ms-"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        node.css("background-image", prefix + text);
      }
      node.css("background-image", text.replace(/right,/, 'to right,'));
      return null;
    };
    verbose = false;
    $("#progress").click(function() {
      verbose = !verbose;
      if (!verbose) {
        return $("#progress").text("");
      }
    });
    return window.setProgress = function(cur, max) {
      var m, node, pct;
      pct = 100 * (max - cur) / max;
      node = $("#progress");
      setGradient(node, pct);
      m = (trianglesKept / triangleCount).toFixed(4);
      if (verbose) {
        return node.text("Painting...");
      }
    };
  });

}).call(this);
