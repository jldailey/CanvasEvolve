// Generated by CoffeeScript 1.10.0
(function() {
  console.log("waiting...");

  $(document).ready(function() {
    var best, canvas, context, current, frame, height, imageDistance, last_frame, original, randomColor, randomPoint, ref, replaceOriginalFromVideo, runtime, scaleBalance, setGradient, setupImage, setupStage, setupVideo, size, stageReady, stopped, triangleCount, trianglesKept, verbose, video, width;
    console.log("setting up...");
    imageDistance = function(a, b) {
      var i, j, ref, sum;
      sum = 0;
      for (i = j = 0, ref = Math.min(a.length, b.length); j < ref; i = j += 1) {
        sum += Math.pow(a[i] - b[i], 2);
      }
      return Math.sqrt(sum);
    };
    original = best = current = null;
    stopped = false;
    size = Math.min(window.innerWidth, window.innerHeight);
    ref = [size, size], width = ref[0], height = ref[1];
    video = null;
    triangleCount = trianglesKept = 0;
    canvas = $.synth("canvas.stop").prependTo("body");
    context = canvas.first().getContext('2d');
    context.clear = function(c) {
      if (c == null) {
        c = 'black';
      }
      this.fillStyle = c;
      return this.fillRect(0, 0, width, height);
    };
    randomPoint = function() {
      return $($.random.integer(0, width), $.random.integer(0, height));
    };
    randomColor = function() {
      return "rgba(" + ($.random.integer(0, 256)) + "," + ($.random.integer(0, 256)) + "," + ($.random.integer(0, 256)) + ", .5)";
    };
    scaleBalance = [.80, .20];
    context.randomTriangle = function() {
      var n, offset, start;
      n = $.random.real(.50, .97);
      scaleBalance = [n, 1 - n];
      triangleCount += 1;
      offset = randomPoint().scale(scaleBalance[0]);
      this.beginPath();
      this.moveTo.apply(this, (start = randomPoint().scale(scaleBalance[1]).plus(offset)));
      this.lineTo.apply(this, randomPoint().scale(scaleBalance[1]).plus(offset));
      this.lineTo.apply(this, randomPoint().scale(scaleBalance[1]).plus(offset));
      this.lineTo.apply(this, start);
      this.closePath();
      this.fillStyle = randomColor();
      return this.fill();
    };
    setupVideo = function(cb) {
      var onError, onVideo;
      navigator.getUserMedia || (navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
      if (!navigator.getUserMedia) {
        return cb("unsupported", null);
      }
      onVideo = function(stream) {
        $.log("onVideo", stream);
        video = $.synth("video[width=" + width + "][height=" + height + "]").css({
          width: $.px(width),
          height: $.px(height)
        }).attr('src', URL.createObjectURL(stream)).prependTo("body").first();
        return video.addEventListener('loadedmetadata', function(evt) {
          $.log("on loadedmetadata", evt);
          video.play();
          canvas.attr({
            width: width,
            height: height
          }).css({
            width: $.px(width),
            height: $.px(height)
          });
          context = canvas.first().getContext('2d');
          return $.delay(1000, function() {
            $.log("Drawing to canvas", video);
            context.drawImage(video, 0, 0, width, height);
            return cb(null, video);
          });
        });
      };
      onError = function(err) {
        return cb(err, null);
      };
      return navigator.getUserMedia({
        video: true
      }, onVideo, onError);
    };
    setupImage = function(cb) {
      return $.Promise.image("earring.jpg").wait(function(err, image) {
        if (err != null) {
          return cb(err, null);
        }
        $(image).attr({
          width: width,
          height: height
        }).prependTo("body");
        canvas.attr({
          width: width,
          height: height
        });
        context.drawImage(image, 0, 0, width, height);
        return cb(null, image);
      });
    };
    runtime = 0;
    last_frame = 0;
    frame = function() {
      var dt;
      if (stopped) {
        return;
      }
      dt = $.now - last_frame;
      runtime += dt;
      last_frame += dt;
      context.randomTriangle();
      return (function() {
        current = context.getImageData(0, 0, width, height);
        current.dist = imageDistance(current.data, original.data);
        if (current.dist < best.dist) {
          best = current;
          window.setProgress(best.dist, original.dist);
          trianglesKept += 1;
        }
        context.putImageData(best, 0, 0);
        if (best.dist > 100 && !stopped) {
          return setTimeout(frame, 0);
        }
      })();
    };
    replaceOriginalFromVideo = function() {
      var _canvas, _context;
      if (video == null) {
        return;
      }
      _canvas = $.synth("canvas.offstage").attr({
        width: width,
        height: height
      });
      _context = _canvas.first().getContext('2d');
      _context.drawImage(video, 0, 0, width, height);
      original = _context.getImageData(0, 0, width, height);
      return original.dist = best.dist = imageDistance(best.data, original.data);
    };
    stageReady = function() {
      $.log("Stage is ready.");
      original = context.getImageData(0, 0, width, height);
      context.clear('white');
      best = current = context.getImageData(0, 0, width, height);
      original.dist = best.dist = imageDistance(best.data, original.data);
      $(".stop").click(function() {
        stopped = !stopped;
        if (!stopped) {
          setTimeout(frame, 0);
          return last_frame = $.now;
        } else {
          return $("#progress").text("Paused");
        }
      });
      setTimeout(frame, 0);
      return last_frame = $.now;
    };
    (setupStage = function() {
      return setupVideo(function(err, video) {
        $.log("setupVideo ->", err, video);
        if (err != null) {
          return setupImage(function(err, image) {
            $.log("setupImage ->", err, image);
            if (err == null) {
              stageReady();
            }
            return $("img").hide();
          });
        } else {
          canvas.first().scrollIntoView();
          return stageReady();
        }
      });
    })();
    setGradient = function(selector, pct, opts) {
      var j, len, node, prefix, ref1, text;
      opts = $.extend({
        fg: 'green',
        bg: 'white'
      }, opts);
      node = $(selector);
      text = "linear-gradient(right, " + opts.fg + " 0%, " + opts.fg + " " + pct + "%, " + opts.bg + " " + pct + "%, " + opts.bg + " 100%)";
      ref1 = ["-webkit-", "-moz-", "-o-", "-ms-"];
      for (j = 0, len = ref1.length; j < len; j++) {
        prefix = ref1[j];
        node.css("background-image", prefix + text);
      }
      node.css("background-image", text.replace(/right,/, 'to right,'));
      return null;
    };
    verbose = false;
    $("#progress").click(function() {
      verbose = !verbose;
      if (!verbose) {
        return $("#progress").text("");
      }
    });
    return window.setProgress = function(cur, max) {
      var m, node, pct;
      return;
      pct = 100 * (max - cur) / max;
      node = $("#progress");
      setGradient(node, pct);
      m = (trianglesKept / triangleCount).toFixed(4);
      if (verbose) {
        return node.text("Painting...");
      }
    };
  });

}).call(this);
