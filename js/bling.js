// Generated by CoffeeScript 1.7.1
(function() {
  var $, Bling, extend,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Object.keys || (Object.keys = function(o) {
    var k, _results;
    _results = [];
    for (k in o) {
      _results.push(k);
    }
    return _results;
  });

  Object.values || (Object.values = function(o) {
    var k, _results;
    _results = [];
    for (k in o) {
      _results.push(o[k]);
    }
    return _results;
  });

  extend = function() {
    var a, b, k, obj, v, _i, _len;
    a = arguments[0], b = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = b.length; _i < _len; _i++) {
      obj = b[_i];
      if (obj) {
        for (k in obj) {
          v = obj[k];
          a[k] = v;
        }
      }
    }
    return a;
  };

  Bling = (function() {
    "Bling:nomunge";
    function Bling() {
      var args, b, i;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 1) {
        args = $.type.lookup(args[0]).array(args[0]);
      }
      b = $.inherit(Bling, args);
      if (args.length === 0 && args[0] !== void 0) {
        i = 0;
        while (args[i] !== void 0) {
          i++;
        }
        b.length = i;
      }
      if ('init' in Bling) {
        return Bling.init(b);
      }
      return b;
    }

    return Bling;

  })();

  Bling.prototype = [];

  Bling.prototype.constructor = Bling;

  Bling.global = (function() {
    return this;
  })();

  Bling.plugin = function(opts, constructor) {
    var error, key, plugin, _fn;
    if (!constructor) {
      constructor = opts;
      opts = {};
    }
    if ("depends" in opts) {
      return this.depends(opts.depends, (function(_this) {
        return function() {
          return _this.plugin({
            provides: opts.provides
          }, constructor);
        };
      })(this));
    }
    try {
      if (typeof (plugin = constructor != null ? constructor.call(this, this) : void 0) === "object") {
        extend(this, plugin != null ? plugin.$ : void 0);
        delete plugin.$;
        extend(this.prototype, plugin);
        _fn = (function(_this) {
          return function(key) {
            return _this[key] || (_this[key] = function() {
              var a;
              a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _this.prototype[key].apply(Bling(a[0]), a.slice(1));
            });
          };
        })(this);
        for (key in plugin) {
          _fn(key);
        }
        if (opts.provides != null) {
          this.provide(opts.provides);
        }
      }
    } catch (_error) {
      error = _error;
      console.log("failed to load plugin: " + this.name + " " + error.message + ": " + error.stack);
    }
    return this;
  };

  extend(Bling, (function() {
    var complete, depend, incomplete, waiting;
    waiting = [];
    complete = {};
    incomplete = function(n) {
      return ((typeof n) === "string" ? n.split(/, */) : n).filter(function(x) {
        return !(x in complete);
      });
    };
    depend = function(needs, func) {
      if ((needs = incomplete(needs)).length === 0) {
        func();
      } else {
        waiting.push(function(need) {
          var i;
          if ((i = needs.indexOf(need)) > -1) {
            needs.splice(i, 1);
          }
          return needs.length === 0 && func;
        });
      }
      return func;
    };
    return {
      depend: depend,
      depends: depend,
      provide: function(needs, data) {
        var caught, err, i, need, ready, _i, _len, _ref;
        caught = null;
        _ref = incomplete(needs);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          need = _ref[_i];
          complete[need] = i = 0;
          while (i < waiting.length) {
            if ((ready = waiting[i](need))) {
              waiting.splice(i, 1);
              try {
                ready(data);
              } catch (_error) {
                err = _error;
                caught = err;
              }
              i = 0;
            } else {
              i++;
            }
          }
        }
        if (caught) {
          throw caught;
        }
        return data;
      }
    };
  })());

  $ = Bling;

  $.plugin({
    depends: "core",
    provides: "async"
  }, function() {
    return {
      series: function(fin) {
        var done, finish_one, next, ret, todo;
        if (fin == null) {
          fin = $.identity;
        }
        ret = $();
        todo = this.length;
        if (!(todo > 0)) {
          fin.apply(ret);
          return this;
        }
        done = 0;
        finish_one = function(index) {
          return function() {
            ret[index] = arguments;
            if (++done >= todo) {
              fin.apply(ret);
            } else {
              next(done);
            }
            return null;
          };
        };
        (next = (function(_this) {
          return function(i) {
            return $.immediate(function() {
              return _this[i](finish_one(i));
            });
          };
        })(this))(0);
        return this;
      },
      parallel: function(fin) {
        var done, finish_one, i, ret, todo, _i, _results;
        if (fin == null) {
          fin = $.identity;
        }
        ret = $();
        todo = this.length;
        if (!(todo > 0)) {
          fin.apply(ret);
          return this;
        }
        done = 0;
        finish_one = function(index) {
          return function() {
            ret[index] = arguments;
            if (++done >= todo) {
              fin.apply(ret);
            }
            return null;
          };
        };
        _results = [];
        for (i = _i = 0; _i < todo; i = _i += 1) {
          _results.push(this[i](finish_one(i)));
        }
        return _results;
      }
    };
  });

  $.plugin({
    depends: 'type,function',
    provides: 'TNET'
  }, function() {
    var DIVIDER, OverflowError, Symbols, Types, UnderflowError, class_index, classes, decodeUInt, encodeUInt, makeFunction, maxInt, packOne, reIndex, register, unpackOne;
    DIVIDER = "\0";
    Types = {
      "number": {
        symbol: "#",
        pack: String,
        unpack: Number
      },
      "string": {
        symbol: "'",
        pack: $.identity,
        unpack: $.identity
      },
      "bool": {
        symbol: "!",
        pack: function(b) {
          return String.fromCharCode(!!b ? 1 : 0);
        },
        unpack: function(s) {
          return s.charCodeAt(0) === 1;
        }
      },
      "null": {
        symbol: "~",
        pack: function() {
          return "";
        },
        unpack: function() {
          return null;
        }
      },
      "undefined": {
        symbol: "_",
        pack: function() {
          return "";
        },
        unpack: function() {
          return void 0;
        }
      },
      "array": {
        symbol: "]",
        pack: function(a) {
          var y;
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = a.length; _i < _len; _i++) {
              y = a[_i];
              _results.push(packOne(y));
            }
            return _results;
          })()).join('');
        },
        unpack: function(s) {
          var data, one, _ref;
          data = [];
          while (s.length > 0) {
            _ref = unpackOne(s), one = _ref[0], s = _ref[1];
            data.push(one);
          }
          return data;
        }
      },
      "bling": {
        symbol: "$",
        pack: function(a) {
          var y;
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = a.length; _i < _len; _i++) {
              y = a[_i];
              _results.push(packOne(y));
            }
            return _results;
          })()).join('');
        },
        unpack: function(s) {
          var data, one, _ref;
          data = $();
          while (s.length > 0) {
            _ref = unpackOne(s), one = _ref[0], s = _ref[1];
            data.push(one);
          }
          return data;
        }
      },
      "object": {
        symbol: "}",
        pack: function(o) {
          var k, v;
          return ((function() {
            var _results;
            _results = [];
            for (k in o) {
              v = o[k];
              if (k !== "constructor" && o.hasOwnProperty(k)) {
                _results.push(packOne(k) + packOne(v));
              }
            }
            return _results;
          })()).join('');
        },
        unpack: function(s) {
          var data, key, value, _ref, _ref1;
          data = {};
          while (s.length > 0) {
            _ref = unpackOne(s), key = _ref[0], s = _ref[1];
            _ref1 = unpackOne(s), value = _ref1[0], s = _ref1[1];
            data[key] = value;
          }
          return data;
        }
      },
      "function": {
        symbol: ")",
        pack: function(f) {
          var args, body, name, name_re, s, _ref;
          s = f.toString().replace(/(?:\n|\r)+\s*/g, ' ');
          name = "";
          name_re = /function\s*(\w+)\(.*/g;
          if (name_re.test(s)) {
            name = s.replace(name_re, "$1");
          }
          _ref = s.replace(/function\s*\w*\(/, '').replace(/\/\*.*\*\//g, '').replace(/}$/, '').split(/\) {/), args = _ref[0], body = _ref[1];
          args = args.split(/, */);
          body = body.replace(/^\s+/, '').replace(/\s*$/, '');
          return $(name, args, body).map(packOne).join('');
        },
        unpack: function(s) {
          var args, body, name, rest, _ref, _ref1, _ref2;
          _ref = unpackOne(s), name = _ref[0], rest = _ref[1];
          _ref1 = unpackOne(rest), args = _ref1[0], rest = _ref1[1];
          _ref2 = unpackOne(rest), body = _ref2[0], rest = _ref2[1];
          return makeFunction(name, args.join(), body);
        }
      },
      "regexp": {
        symbol: "/",
        pack: function(r) {
          return String(r).slice(1, -1);
        },
        unpack: function(s) {
          return RegExp(s);
        }
      },
      "class instance": {
        symbol: "C",
        pack: function(o) {
          if (!('constructor' in o)) {
            throw new Error("TNET: cant pack non-class as class");
          }
          if (!(o.constructor in class_index)) {
            throw new Error("TNET: cant pack unregistered class (name: " + o.constructor.name);
          }
          return packOne(class_index[o.constructor]) + packOne(o, "object");
        },
        unpack: function(s) {
          var i, obj, rest, _ref, _ref1;
          _ref = unpackOne(s), i = _ref[0], rest = _ref[1];
          _ref1 = unpackOne(rest), obj = _ref1[0], rest = _ref1[1];
          if (i <= classes.length) {
            obj.__proto__ = classes[i - 1].prototype;
          } else {
            throw new Error("TNET: attempt to unpack unregistered class index: " + i);
          }
          return obj;
        }
      }
    };
    makeFunction = function(name, args, body) {
      eval("var f = function " + name + "(" + args + "){" + body + "}");
      return f;
    };
    classes = [];
    class_index = {};
    register = function(klass) {
      return class_index[klass] || (class_index[klass] = classes.push(klass));
    };
    Symbols = {};
    (reIndex = function() {
      var t, v, _results;
      _results = [];
      for (t in Types) {
        v = Types[t];
        _results.push(Symbols[v.symbol] = v);
      }
      return _results;
    })();
    decodeUInt = function(s) {
      var i, n, _, _i, _len;
      n = 0;
      for (i = _i = 0, _len = s.length; _i < _len; i = ++_i) {
        _ = s[i];
        n |= s.charCodeAt(i) << (i << 3);
      }
      return n;
    };
    maxInt = Math.pow(2, 31) - 1;
    OverflowError = function(n) {
      return new Error("Value too large: " + n + " > " + maxInt);
    };
    UnderflowError = function(n) {
      return new Error("Value too small: " + n + " < 0");
    };
    encodeUInt = function(n) {
      var s;
      if (n > maxInt) {
        throw OverflowError(n);
      }
      if (n < 0) {
        throw UnderflowError(n);
      }
      s = "";
      while (n > 0) {
        s = s + String.fromCharCode(n & 0xFF);
        n = n >> 8;
      }
      return s;
    };
    unpackOne = function(data) {
      var end, i, _ref;
      if (data == null) {
        return;
      }
      if ((i = data.indexOf(DIVIDER)) >= 0) {
        end = i + 1 + decodeUInt(data.slice(0, i), 10);
        return [(_ref = Symbols[data[end]]) != null ? _ref.unpack(data.slice(i + 1, end)) : void 0, data.slice(end + 1)];
      }
      return void 0;
    };
    packOne = function(x, forceType) {
      var data, header, len, t, tx, _ref;
      if (forceType != null) {
        tx = forceType;
      } else {
        tx = $.type(x);
        if (tx === "object" && ((_ref = x.constructor) != null ? _ref.name : void 0) !== "Object") {
          tx = "class instance";
        }
      }
      if ((t = Types[tx]) == null) {
        throw new Error("TNET: dont know how to pack type '" + tx + "'");
      }
      data = t.pack(x);
      len = data.length | 0;
      header = len === 0 ? "\0" : encodeUInt(len) + DIVIDER;
      return header + data + t.symbol;
    };
    return {
      $: {
        BNET: {
          Types: Types,
          registerClass: register,
          stringify: packOne,
          parse: function(x) {
            var _ref;
            return (_ref = unpackOne(x)) != null ? _ref[0] : void 0;
          }
        }
      }
    };
  });

  $.plugin({
    provides: "cache",
    depends: "core, sortBy"
  }, function() {
    var EffCache;
    EffCache = (function() {
      var log;

      log = $.logger("[LRU]");

      function EffCache(capacity, defaultTtl) {
        var autoEvict, eff, index, noValue, order, reIndex, rePosition;
        this.capacity = capacity != null ? capacity : 1000;
        this.defaultTtl = defaultTtl != null ? defaultTtl : Infinity;
        this.capacity = Math.max(1, this.capacity);
        this.evictCount = Math.max(3, Math.floor(this.capacity * .1));
        index = Object.create(null);
        order = [];
        eff = function(o) {
          return -o.r / o.w;
        };
        autoEvict = (function(_this) {
          return function() {
            var k;
            if (order.length >= _this.capacity) {
              while (order.length + _this.evictCount - 1 >= _this.capacity) {
                delete index[k = order.pop().k];
              }
            }
            return null;
          };
        })(this);
        reIndex = function(i, j) {
          var x, _i;
          for (x = _i = i; i <= j ? _i <= j : _i >= j; x = i <= j ? ++_i : --_i) {
            if ((0 <= x && x < order.length)) {
              index[order[x].k] = x;
            }
          }
          return null;
        };
        rePosition = function(i) {
          var j, obj;
          obj = order[i];
          j = $.sortedIndex(order, obj, eff);
          if (j !== i) {
            order.splice(i, 1);
            order.splice(j, 0, obj);
            reIndex(i, j);
          }
          return null;
        };
        noValue = {
          v: void 0
        };
        $.extend(this, {
          has: function(k) {
            return k in index;
          },
          del: function(k) {
            var i;
            if (k in index) {
              i = index[k];
              order.splice(i, 1);
              delete index[k];
              return reIndex(i, order.length - 1);
            }
          },
          set: (function(_this) {
            return function(k, v, ttl) {
              var d, i, item;
              if (ttl == null) {
                ttl = _this.defaultTtl;
              }
              if (k in index) {
                d = order[i = index[k]];
                d.v = v;
                d.w += 1;
                rePosition(i);
              } else {
                autoEvict();
                item = {
                  k: k,
                  v: v,
                  r: 0,
                  w: 1
                };
                i = $.sortedIndex(order, item, eff);
                order.splice(i, 0, item);
                reIndex(i, order.length - 1);
              }
              if (ttl < Infinity) {
                $.delay(ttl, function() {
                  return _this.del(k);
                });
              }
              return v;
            };
          })(this),
          get: function(k) {
            var i, ret;
            ret = noValue;
            if (k in index) {
              i = index[k];
              ret = order[i];
              ret.r += 1;
              rePosition(i);
            }
            return ret.v;
          }
        });
      }

      return EffCache;

    })();
    return {
      $: {
        Cache: $.extend(EffCache, new EffCache(10000))
      }
    };
  });

  $.plugin({
    provides: "cartesian"
  }, function() {
    return {
      $: {
        cartesian: function() {
          var helper, n, ret, sets;
          sets = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          n = sets.length;
          ret = [];
          helper = function(cur, i) {
            var x, _i, _len, _ref;
            if (++i >= n) {
              return ret.push(cur);
            }
            _ref = sets[i];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              helper(cur.concat(x), i);
            }
            return null;
          };
          helper([], -1);
          return $(ret);
        }
      }
    };
  });

  $.plugin(function() {
    var _base, _base1, _base2, _base3;
    (_base = String.prototype).trimLeft || (_base.trimLeft = function() {
      return this.replace(/^\s+/, "");
    });
    (_base1 = String.prototype).split || (_base1.split = function(sep) {
      var a, i, j;
      a = [];
      i = 0;
      while ((j = this.indexOf(sep, i)) > -1) {
        a.push(this.substring(i, j));
        i = j + 1;
      }
      return a;
    });
    (_base2 = String.prototype).lastIndexOf || (_base2.lastIndexOf = function(s, c, i) {
      var j;
      if (i == null) {
        i = -1;
      }
      j = -1;
      while ((i = s.indexOf(c, i + 1)) > -1) {
        j = i;
      }
      return j;
    });
    (_base3 = Array.prototype).join || (_base3.join = function(sep) {
      var n, s;
      if (sep == null) {
        sep = '';
      }
      n = this.length;
      if (n === 0) {
        return "";
      }
      s = this[n - 1];
      while (--n > 0) {
        s = this[n - 1] + sep + s;
      }
      return s;
    });
    if (typeof Event !== "undefined" && Event !== null) {
      Event.prototype.preventAll = function() {
        this.preventDefault();
        this.stopPropagation();
        return this.cancelBubble = true;
      };
    }
    if (typeof Element !== "undefined" && Element !== null) {
      Element.prototype.matchesSelector = Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.matchesSelector;
    }
    return {};
  });

  $.plugin({
    provides: 'config',
    depends: 'type'
  }, function() {
    var get, parse, set;
    get = function(name, def) {
      var _ref;
      return (_ref = process.env[name]) != null ? _ref : def;
    };
    set = function(name, val) {
      return process.env[name] = val;
    };
    parse = function(data) {
      var ret;
      ret = {};
      $(data.toString("utf8").split("\n")).filter($.isEmpty, false).filter(/^#/, false).map(function() {
        return this.replace(/^\s+/, '').split('=');
      }).each(function(kv) {
        var _ref;
        if ((_ref = kv[0]) != null ? _ref.length : void 0) {
          return ret[kv[0]] = kv[1].replace(/^["']/, '').replace(/['"]$/, '');
        }
      });
      return ret;
    };
    return {
      $: {
        config: $.extend(get, {
          get: get,
          set: set,
          parse: parse
        })
      }
    };
  });

  $.plugin({
    provides: "core",
    depends: "string"
  }, function() {
    var baseTime, index;
    $.defineProperty($, "now", {
      get: function() {
        return +(new Date);
      }
    });
    index = function(i, o) {
      while (i < 0) {
        i += o.length;
      }
      return Math.min(i, o.length);
    };
    baseTime = 0;
    return {
      $: {
        log: $.extend(function() {
          var a, prefix, _ref;
          a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          prefix = "+" + ($.padLeft(String($.now - baseTime), $.log.prefixSize, '0')) + ":";
          if (baseTime === 0 || prefix.length > $.log.prefixSize + 2) {
            prefix = $.date.format(baseTime = $.now, "dd/mm/YY HH:MM:SS:", "ms");
          }
          if (a.length && $.is("string", a[0])) {
            a[0] = "" + prefix + " " + a[0];
          } else {
            a.unshift(prefix);
          }
          (_ref = $.log).out.apply(_ref, a);
          if (a.length) {
            return a[a.length - 1];
          }
        }, {
          out: function() {
            return console.log.apply(console, arguments);
          },
          prefixSize: 5
        }),
        logger: function(prefix) {
          return function() {
            var m;
            m = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            m.unshift(prefix);
            return $.log.apply($, m);
          };
        },
        assert: function(c, m) {
          if (m == null) {
            m = "";
          }
          if (!c) {
            throw new Error("assertion failed: " + m);
          }
        },
        coalesce: function() {
          var a;
          a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return $(a).coalesce();
        },
        keysOf: function(o) {
          var k;
          return $((function() {
            var _results;
            _results = [];
            for (k in o) {
              _results.push(k);
            }
            return _results;
          })());
        },
        valuesOf: function(o) {
          return $.keysOf(o).map(function(k) {
            var err;
            try {
              return o[k];
            } catch (_error) {
              err = _error;
              return err;
            }
          });
        }
      },
      eq: function(i) {
        return $([this[index(i, this)]]);
      },
      each: function(f) {
        var t, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          t = this[_i];
          f.call(t, t);
        }
        return this;
      },
      map: function(f) {
        var b, i, t, _i, _len;
        b = $();
        i = 0;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          t = this[_i];
          b[i++] = f.call(t, t);
        }
        return b;
      },
      filterMap: function(f) {
        var b, t, v, _i, _len;
        b = $();
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          t = this[_i];
          v = f.call(t, t);
          if (v != null) {
            b.push(v);
          }
        }
        return b;
      },
      tap: function(f) {
        return f.call(this, this);
      },
      replaceWith: function(array) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = array.length; _i < _ref; i = _i += 1) {
          _results.push(this[i] = array[i]);
        }
        return _results;
      },
      reduce: function(f, a) {
        var i, n, x, _i;
        i = 0;
        n = this.length;
        if (a == null) {
          a = this[i++];
        }
        for (x = _i = i; _i < n; x = _i += 1) {
          a = f.call(this[x], a, this[x]);
        }
        return a;
      },
      union: function(other, strict) {
        var ret, x, _i, _j, _len, _len1;
        if (strict == null) {
          strict = true;
        }
        ret = $();
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          x = this[_i];
          if (!ret.contains(x, strict)) {
            ret.push(x);
          }
        }
        for (_j = 0, _len1 = other.length; _j < _len1; _j++) {
          x = other[_j];
          if (!ret.contains(x, strict)) {
            ret.push(x);
          }
        }
        return ret;
      },
      distinct: function(strict) {
        if (strict == null) {
          strict = true;
        }
        return this.union(this, strict);
      },
      intersect: function(other) {
        var x;
        return $((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            x = this[_i];
            if (__indexOf.call(other, x) >= 0) {
              _results.push(x);
            }
          }
          return _results;
        }).call(this));
      },
      contains: function(item, strict) {
        var t, _i, _len;
        if (strict == null) {
          strict = true;
        }
        if (strict) {
          return this.indexOf(item) > -1;
        } else {
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            t = this[_i];
            if (t == item) {
              return true;
            }
          }
        }
        return false;
      },
      count: function(item, strict) {
        var t;
        if (strict == null) {
          strict = true;
        }
        return $((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            t = this[_i];
            if ((item === void 0) || (strict && t === item) || (!strict && t == item)) {
              _results.push(1);
            }
          }
          return _results;
        }).call(this)).sum();
      },
      coalesce: function() {
        var i, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          i = this[_i];
          if ($.is('array', i) || $.is('bling', i)) {
            i = $(i).coalesce();
          }
          if (i != null) {
            return i;
          }
        }
        return null;
      },
      swap: function(i, j) {
        var _ref;
        i = index(i, this);
        j = index(j, this);
        if (i !== j) {
          _ref = [this[j], this[i]], this[i] = _ref[0], this[j] = _ref[1];
        }
        return this;
      },
      shuffle: function() {
        var i;
        i = this.length - 1;
        while (i >= 0) {
          this.swap(--i, Math.floor(Math.random() * i));
        }
        return this;
      },
      select: (function() {
        var getter, selectMany, selectOne;
        getter = function(prop) {
          return function() {
            var v;
            if ($.is("function", v = this[prop])) {
              return $.bound(this, v);
            } else {
              return v;
            }
          };
        };
        selectOne = function(p) {
          var i, type;
          switch (type = $.type(p)) {
            case 'regexp':
              return selectMany.call(this, p);
            case 'string':
              if (p === "*") {
                return this.flatten();
              } else if ((i = p.indexOf('.')) > -1) {
                return this.select(p.substr(0, i)).select(p.substr(i + 1));
              } else {
                return this.map(getter(p));
              }
              break;
            default:
              return $();
          }
        };
        selectMany = function() {
          var a, i, lists, match, n, p, _i, _j, _len, _len1, _ref;
          a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          n = this.length;
          lists = Object.create(null);
          for (_i = 0, _len = a.length; _i < _len; _i++) {
            p = a[_i];
            if ($.is('regexp', p)) {
              _ref = $.keysOf(this[0]).filter(p);
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                match = _ref[_j];
                lists[match] = this.select(match);
              }
            } else {
              lists[p] = this.select(p);
            }
          }
          i = 0;
          return this.map(function() {
            var key, obj, val;
            obj = Object.create(null);
            for (p in lists) {
              key = p.split('.').pop();
              val = lists[p][i];
              if (val !== void 0) {
                obj[key] = val;
              }
            }
            i++;
            return obj;
          });
        };
        return function() {
          switch (arguments.length) {
            case 0:
              return this;
            case 1:
              return selectOne.apply(this, arguments);
            default:
              return selectMany.apply(this, arguments);
          }
        };
      })(),
      or: function(x) {
        var i, _i, _ref;
        for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this[i] || (this[i] = x);
        }
        return this;
      },
      zap: function(p, v) {
        var head, i, k, tail;
        if (($.is('object', p)) && (v == null)) {
          for (k in p) {
            v = p[k];
            this.zap(k, v);
          }
          return this;
        }
        i = p.lastIndexOf(".");
        if (i > 0) {
          head = p.substr(0, i);
          tail = p.substr(i + 1);
          this.select(head).zap(tail, v);
          return this;
        }
        switch ($.type(v)) {
          case "array":
          case "bling":
            this.each(function() {
              return this[p] = v[++i % v.length];
            });
            break;
          case "function":
            this.zap(p, this.select(p).map(v));
            break;
          default:
            this.each(function() {
              return this[p] = v;
            });
        }
        return this;
      },
      clean: function() {
        var props;
        props = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.each(function() {
          var key, prop, _i, _j, _len, _len1, _ref;
          for (_i = 0, _len = props.length; _i < _len; _i++) {
            prop = props[_i];
            switch ($.type(prop)) {
              case 'string':
              case 'number':
                delete this[prop];
                break;
              case 'regexp':
                _ref = Object.keys(this);
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  key = _ref[_j];
                  if (prop.test(key)) {
                    delete this[key];
                  }
                }
            }
          }
          return null;
        });
      },
      take: function(n) {
        var end, i;
        if (n == null) {
          n = 1;
        }
        end = Math.min(n, this.length);
        return $((function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; _i < end; i = _i += 1) {
            _results.push(this[i]);
          }
          return _results;
        }).call(this));
      },
      skip: function(n) {
        var i, start;
        if (n == null) {
          n = 0;
        }
        start = Math.max(0, n | 0);
        return $((function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = start, _ref = this.length; _i < _ref; i = _i += 1) {
            _results.push(this[i]);
          }
          return _results;
        }).call(this));
      },
      first: function(n) {
        if (n == null) {
          n = 1;
        }
        if (n === 1) {
          return this[0];
        } else {
          return this.take(n);
        }
      },
      last: function(n) {
        if (n == null) {
          n = 1;
        }
        if (n === 1) {
          return this[this.length - 1];
        } else {
          return this.skip(this.length - n);
        }
      },
      slice: function(start, end) {
        var i;
        if (start == null) {
          start = 0;
        }
        if (end == null) {
          end = this.length;
        }
        start = index(start, this);
        end = index(end, this);
        return $((function() {
          var _i, _results;
          _results = [];
          for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
            _results.push(this[i]);
          }
          return _results;
        }).call(this));
      },
      extend: function(b) {
        var i, _i, _len;
        for (_i = 0, _len = b.length; _i < _len; _i++) {
          i = b[_i];
          this.push(i);
        }
        return this;
      },
      push: function(b) {
        Array.prototype.push.call(this, b);
        return this;
      },
      filter: function(f, limit, positive) {
        var a, g, it, _i, _len, _ref, _ref1;
        if ($.is("bool", limit)) {
          _ref = [limit, positive], positive = _ref[0], limit = _ref[1];
        }
        if ($.is("number", positive)) {
          _ref1 = [positive, limit], limit = _ref1[0], positive = _ref1[1];
        }
        if (limit == null) {
          limit = this.length;
        }
        if (positive == null) {
          positive = true;
        }
        g = (function() {
          switch ($.type(f)) {
            case "object":
              return function(x) {
                return $.matches(f, x);
              };
            case "string":
              return function(x) {
                var _ref2;
                return (_ref2 = x != null ? typeof x.matchesSelector === "function" ? x.matchesSelector(f) : void 0 : void 0) != null ? _ref2 : false;
              };
            case "regexp":
              return function(x) {
                return f.test(x);
              };
            case "function":
              return f;
            default:
              throw new Error("unsupported argument to filter: " + ($.type(f)));
          }
        })();
        a = $();
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          it = this[_i];
          if ((!!g.call(it, it)) === positive) {
            if (--limit < 0) {
              break;
            }
            a.push(it);
          }
        }
        return a;
      },
      matches: function(expr) {
        switch ($.type(expr)) {
          case "string":
            return this.select('matchesSelector').call(expr);
          case "regexp":
            return this.map(function(x) {
              return expr.test(x);
            });
          default:
            throw new Error("unsupported argument to matches: " + ($.type(expr)));
        }
      },
      weave: function(b) {
        var c, i, _i, _j, _ref, _ref1;
        c = $();
        for (i = _i = _ref = this.length - 1; _i >= 0; i = _i += -1) {
          c[(i * 2) + 1] = this[i];
        }
        for (i = _j = 0, _ref1 = b.length; _j < _ref1; i = _j += 1) {
          c[i * 2] = b[i];
        }
        return c;
      },
      fold: function(f) {
        var b, i, n;
        n = this.length;
        b = $((function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = n - 1; _i < _ref; i = _i += 2) {
            _results.push(f.call(this, this[i], this[i + 1]));
          }
          return _results;
        }).call(this));
        if ((n % 2) === 1) {
          b.push(f.call(this, this[n - 1], void 0));
        }
        return b;
      },
      flatten: function() {
        var b, i, item, j, _i, _j, _len, _len1;
        b = $();
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          item = this[i];
          if (($.is('array', item)) || ($.is('bling', item)) || ($.is('arguments', item)) || ($.is('nodelist', item))) {
            for (_j = 0, _len1 = item.length; _j < _len1; _j++) {
              j = item[_j];
              b.push(j);
            }
          } else {
            b.push(item);
          }
        }
        return b;
      },
      call: function() {
        return this.apply(null, arguments);
      },
      apply: function(context, args) {
        return this.filterMap(function() {
          if ($.is('function', this)) {
            return this.apply(context, args);
          } else {
            return null;
          }
        });
      },
      log: function(label) {
        if (label) {
          $.log(label, this.toString(), this.length + " items");
        } else {
          $.log(this.toString(), this.length + " items");
        }
        return this;
      },
      toArray: function() {
        this.__proto__ = Array.prototype;
        return this;
      },
      clear: function() {
        return this.splice(0, this.length);
      },
      indexWhere: function(f) {
        var i, x, _i, _len;
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          x = this[i];
          if (f.call(x, x)) {
            return i;
          }
        }
        return -1;
      }
    };
  });

  $.plugin({
    provides: "css,CSS"
  }, function() {
    var compact, flatten, parse, specialOps, stripComments, trim;
    flatten = function(o, prefix, into) {
      var k, nk, v;
      if (!(prefix in into)) {
        into[prefix] = [];
      }
      for (k in o) {
        v = o[k];
        switch (typeof v) {
          case "string":
          case "number":
            nk = k.replace(/([a-z]+)([A-Z]+)/g, "$1-$2").toLowerCase();
            into[prefix].push("" + nk + ": " + v + ";");
            break;
          case "object":
            nk = prefix ? prefix + k : k;
            flatten(v, nk, into);
            break;
          default:
            throw new Error("unexpected type in css: " + (typeof v));
        }
      }
      return into;
    };
    trim = function(str) {
      return str.replace(/^\s+/, '').replace(/\s+$/, '');
    };
    stripComments = function(str) {
      var i, j;
      while ((i = str.indexOf("/*")) > -1) {
        if ((j = str.indexOf("*/", i)) === -1) {
          break;
        }
        str = str.substring(0, i) + str.substring(j + 2);
      }
      return str;
    };
    parse = function(str, into) {
      var body, colon, key, m, rest, rule, selector, value, _i, _len;
      if (m = str.match(/([^{]+){/)) {
        selector = trim(m[1]);
        rest = str.substring(m[0].length);
        into[selector] || (into[selector] = {});
        if (m = rest.match(/([^}]+)}/)) {
          body = m[1].split(';');
          rest = rest.substring(m[0].length);
          for (_i = 0, _len = body.length; _i < _len; _i++) {
            rule = body[_i];
            colon = rule.indexOf(':');
            if (!(key = rule.substring(0, colon))) {
              continue;
            }
            key = trim(key);
            value = trim(rule.substring(colon + 1));
            into[selector][key] = value;
          }
        }
        if (rest.length > 0) {
          return parse(rest, into);
        }
      }
      return into;
    };
    specialOps = '>+~';
    compact = function(obj) {
      var cur, first, op, part, parts, phaseTwo, ret, rules, selector, _i, _j, _len, _len1;
      ret = {};
      for (selector in obj) {
        rules = obj[selector];
        for (_i = 0, _len = specialOps.length; _i < _len; _i++) {
          op = specialOps[_i];
          selector = selector.replace(op, " " + op + " ");
        }
        parts = selector.split(/\s+/);
        switch (parts.length) {
          case 0:
            continue;
          case 1:
            $.extend((ret[selector] || (ret[selector] = {})), rules);
            break;
          default:
            cur = ret;
            first = true;
            for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
              part = parts[_j];
              if (!first) {
                part = " " + part;
              }
              cur = cur[part] || (cur[part] = {});
              first = false;
            }
            $.extend(cur, rules);
        }
      }
      phaseTwo = function(cur) {
        var key, modified, subkeys, val;
        modified = false;
        for (key in cur) {
          val = cur[key];
          if ($.is('object', val)) {
            subkeys = Object.keys(val);
            switch (subkeys.length) {
              case 0:
                delete cur[key];
                break;
              default:
                if (subkeys.length === 1 && $.is('object', val[subkeys[0]])) {
                  cur[key + subkeys[0]] = val[subkeys[0]];
                  delete cur[key];
                  phaseTwo(cur);
                }
            }
            phaseTwo(val);
          }
        }
        return cur;
      };
      return phaseTwo(ret);
    };
    return {
      $: {
        CSS: {
          parse: function(str, packed) {
            var ret;
            if (packed == null) {
              packed = false;
            }
            ret = parse(stripComments(str), {});
            if (packed) {
              return compact(ret);
            } else {
              return ret;
            }
          },
          stringify: function(obj) {
            var x, y;
            return ((function() {
              var _ref, _results;
              _ref = flatten(obj, "", {});
              _results = [];
              for (x in _ref) {
                y = _ref[x];
                if (y.length > 0) {
                  _results.push("" + x + " { " + (y.join(' ')) + " }");
                }
              }
              return _results;
            })()).join(' ');
          }
        }
      }
    };
  });

  $.plugin({
    provides: 'date',
    depends: 'type'
  }, function() {
    var YY, adder, d, floor, format_keys, formats, h, longDays, m, ms, parser_keys, parsers, s, shortDays, units, _ref;
    _ref = [1, 1000, 1000 * 60, 1000 * 60 * 60, 1000 * 60 * 60 * 24], ms = _ref[0], s = _ref[1], m = _ref[2], h = _ref[3], d = _ref[4];
    units = {
      ms: ms,
      s: s,
      m: m,
      h: h,
      d: d,
      sec: s,
      second: s,
      seconds: s,
      min: m,
      minute: m,
      minutes: m,
      hr: h,
      hour: h,
      hours: h,
      day: d,
      days: d
    };
    shortDays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    longDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    formats = {
      yyyy: Date.prototype.getUTCFullYear,
      YY: YY = function() {
        return String(this.getUTCFullYear()).substr(2);
      },
      yy: YY,
      mm: function() {
        return this.getUTCMonth() + 1;
      },
      dd: Date.prototype.getUTCDate,
      dw: Date.prototype.getUTCDay,
      dW: function() {
        return shortDays[parseInt(this.getUTCDay(), 10) - 1];
      },
      DW: function() {
        return longDays[parseInt(this.getUTCDay(), 10) - 1];
      },
      HH: Date.prototype.getUTCHours,
      MM: Date.prototype.getUTCMinutes,
      SS: Date.prototype.getUTCSeconds,
      MS: Date.prototype.getUTCMilliseconds
    };
    format_keys = Object.keys(formats).sort().reverse();
    parsers = {
      yyyy: Date.prototype.setUTCFullYear,
      mm: function(x) {
        return this.setUTCMonth(x - 1);
      },
      dd: Date.prototype.setUTCDate,
      HH: Date.prototype.setUTCHours,
      MM: Date.prototype.setUTCMinutes,
      SS: Date.prototype.setUTCSeconds,
      MS: Date.prototype.setUTCMilliseconds
    };
    parser_keys = Object.keys(parsers).sort().reverse();
    floor = Math.floor;
    $.type.register("date", {
      is: function(o) {
        return $.isType(Date, o);
      },
      array: function(o) {
        return [o];
      },
      string: function(o, fmt, unit) {
        return $.date.format(o, fmt, unit);
      },
      number: function(o, unit) {
        return $.date.stamp(o, unit);
      }
    });
    $.type.extend('string', {
      date: function(o, fmt) {
        if (fmt == null) {
          fmt = $.date.defaultFormat;
        }
        return new Date($.date.parse(o, fmt, "ms"));
      }
    });
    $.type.extend('number', {
      date: function(o, unit) {
        if (unit == null) {
          unit = $.date.defaultUnit;
        }
        return $.date.unstamp(o, unit);
      }
    });
    adder = function(key) {
      return function(stamp, delta, stamp_unit) {
        var date;
        if (stamp_unit == null) {
          stamp_unit = $.date.defaultUnit;
        }
        date = $.date.unstamp(stamp, stamp_unit);
        parsers[key].call(date, (formats[key].call(date)) + delta);
        return $.date.stamp(date, stamp_unit);
      };
    };
    return {
      $: {
        date: {
          defaultUnit: "s",
          defaultFormat: "yyyy-mm-dd HH:MM:SS",
          stamp: function(date, unit) {
            if (date == null) {
              date = new Date;
            }
            if (unit == null) {
              unit = $.date.defaultUnit;
            }
            return floor(date / units[unit]);
          },
          unstamp: function(stamp, unit) {
            if (unit == null) {
              unit = $.date.defaultUnit;
            }
            return new Date(floor(stamp * units[unit]));
          },
          convert: function(stamp, from, to) {
            if (from == null) {
              from = $.date.defaultUnit;
            }
            if (to == null) {
              to = $.date.defaultUnit;
            }
            if ($.is("date", stamp)) {
              stamp = $.date.stamp(stamp, from);
            }
            return floor(stamp * units[from] / units[to]);
          },
          midnight: function(stamp, unit) {
            if (unit == null) {
              unit = $.date.defaultUnit;
            }
            return $.date.convert($.date.convert(stamp, unit, "d"), "d", unit);
          },
          format: function(stamp, fmt, unit) {
            var date, k, _i, _len;
            if (fmt == null) {
              fmt = $.date.defaultFormat;
            }
            if (unit == null) {
              unit = $.date.defaultUnit;
            }
            if ($.is("date", stamp)) {
              stamp = $.date.stamp(stamp, unit);
            }
            date = $.date.unstamp(stamp, unit);
            for (_i = 0, _len = format_keys.length; _i < _len; _i++) {
              k = format_keys[_i];
              fmt = fmt.replace(k, $.padLeft("" + formats[k].call(date), k.length, "0"));
            }
            return fmt;
          },
          parse: function(dateString, fmt, to) {
            var date, err, i, k, _i, _j, _len, _ref1;
            if (fmt == null) {
              fmt = $.date.defaultFormat;
            }
            if (to == null) {
              to = $.date.defaultUnit;
            }
            date = new Date(0);
            for (i = _i = 0, _ref1 = fmt.length; _i < _ref1; i = _i += 1) {
              for (_j = 0, _len = parser_keys.length; _j < _len; _j++) {
                k = parser_keys[_j];
                if (fmt.indexOf(k, i) === i) {
                  try {
                    parsers[k].call(date, parseInt(dateString.slice(i, i + k.length), 10));
                  } catch (_error) {
                    err = _error;
                    throw new Error("Invalid date ('" + dateString + "') given format mask: " + fmt + " (failed at position " + i + ")");
                  }
                }
              }
            }
            return $.date.stamp(date, to);
          },
          addMilliseconds: adder("MS"),
          addSeconds: adder("SS"),
          addMinutes: adder("MM"),
          addHours: adder("HH"),
          addDays: adder("dd"),
          addMonths: adder("mm"),
          addYears: adder("yyyy"),
          range: function(from, to, interval, interval_unit, stamp_unit) {
            var add, cur, ret;
            if (interval == null) {
              interval = 1;
            }
            if (interval_unit == null) {
              interval_unit = "dd";
            }
            if (stamp_unit == null) {
              stamp_unit = $.date.defaultUnit;
            }
            add = adder(interval_unit);
            ret = [from];
            while ((cur = ret[ret.length - 1]) < to) {
              ret.push(add(cur, interval, stamp_unit));
            }
            return ret;
          }
        }
      },
      midnight: function(unit) {
        if (unit == null) {
          unit = $.date.defaultUnit;
        }
        return this.map(function() {
          return $.date.midnight(this, unit);
        });
      },
      unstamp: function(unit) {
        if (unit == null) {
          unit = $.date.defaultUnit;
        }
        return this.map(function() {
          return $.date.unstamp(this, unit);
        });
      },
      stamp: function(unit) {
        if (unit == null) {
          unit = $.date.defaultUnit;
        }
        return this.map(function() {
          return $.date.stamp(this, unit);
        });
      },
      dateFormat: function(fmt, unit) {
        if (fmt == null) {
          fmt = $.date.defaultFormat;
        }
        if (unit == null) {
          unit = $.date.defaultUnit;
        }
        return this.map(function() {
          return $.date.format(this, fmt, unit);
        });
      },
      dateParse: function(fmt, unit) {
        if (fmt == null) {
          fmt = $.date.defaultFormat;
        }
        if (unit == null) {
          unit = $.date.defaultUnit;
        }
        return this.map(function() {
          return $.date.parse(this, fmt, unit);
        });
      }
    };
  });

  $.plugin({
    provides: "delay",
    depends: "function"
  }, function() {
    return {
      $: {
        delay: (function() {
          var timeoutQueue;
          timeoutQueue = $.extend([], (function() {
            var next;
            next = function(a) {
              return function() {
                if (a.length) {
                  return a.shift()();
                }
              };
            };
            return {
              add: function(f, n) {
                var i, _i, _ref;
                $.extend(f, {
                  order: n + $.now,
                  timeout: setTimeout(next(this), n)
                });
                for (i = _i = 0, _ref = this.length; _i <= _ref; i = _i += 1) {
                  if (i === this.length || this[i].order > f.order) {
                    this.splice(i, 0, f);
                    break;
                  }
                }
                return this;
              },
              cancel: function(f) {
                var i;
                if ((i = this.indexOf(f)) > -1) {
                  this.splice(i, 1);
                  clearTimeout(f.timeout);
                }
                return this;
              }
            };
          })());
          return function(n, f) {
            var b, k, v;
            switch (false) {
              case !$.is('object', n):
                b = $((function() {
                  var _results;
                  _results = [];
                  for (k in n) {
                    v = n[k];
                    _results.push($.delay(k, v));
                  }
                  return _results;
                })());
                return {
                  cancel: function() {
                    return b.select('cancel').call();
                  },
                  unref: function() {
                    return b.select('unref').call();
                  },
                  ref: function() {
                    return b.select('ref').call();
                  }
                };
              case !$.is('function', f):
                timeoutQueue.add(f, parseInt(n, 10));
                return {
                  cancel: function() {
                    return timeoutQueue.cancel(f);
                  },
                  unref: function(f) {
                    var _ref;
                    return (_ref = f.timeout) != null ? _ref.unref() : void 0;
                  },
                  ref: function(f) {
                    var _ref;
                    return (_ref = f.timeout) != null ? _ref.ref() : void 0;
                  }
                };
              default:
                throw new Error("Bad arguments to $.delay (expected: int,function given: " + ($.type(n)) + "," + ($.type(f)) + ")");
            }
          };
        })(),
        immediate: (function() {
          switch (false) {
            case !('setImmediate' in $.global):
              return $.global.setImmediate;
            case (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) == null:
              return process.nextTick;
            default:
              return function(f) {
                return setTimeout(f, 0);
              };
          }
        })(),
        interval: function(n, f) {
          var g, paused, ret;
          paused = false;
          ret = $.delay(n, g = function() {
            if (!paused) {
              f();
            }
            return $.delay(n, g);
          });
          return $.extend(ret, {
            pause: function(p) {
              if (p == null) {
                p = true;
              }
              return paused = p;
            },
            resume: function(p) {
              if (p == null) {
                p = true;
              }
              return paused = !p;
            }
          });
        }
      },
      delay: function(n, f) {
        $.delay(n, $.bind(this, f));
        return this;
      }
    };
  });

  $.plugin({
    depends: 'hook,synth,delay',
    provides: 'dialog'
  }, function() {
    var createDialog, injectCSS, prefixes, transition;
    prefixes = ["-webkit", "-moz"];
    transition = function(props, duration) {
      props = props.split(/, */);
      return prefixes.map(function(prefix) {
        return "";
      }).join(' ');
    };
    injectCSS = function() {
      $('head style.dialog').remove();
      return $.synth("style.dialog ' .dialog, .modal { position: absolute; } .modal { background: rgba(0,0,0,.3); opacity: 0; } .dialog { box-shadow: 8px 8px 4px rgba(0,0,0,.4); border-radius: 8px; background: white; padding: 6px; } .dialog > .title { text-align: center; width: 100%; } .dialog > .content { width: 100%; } '".replace(/\t+|\n+/g, ' ')).prependTo("head");
    };
    createDialog = function(opts) {
      var contentNode, dialog, dialogSynth, modal, titleNode;
      opts = $.extend(createDialog.getDefaultOptions(), opts);
      injectCSS();
      dialogSynth = "";
      modal = $.synth("div.modal div.dialog#" + opts.id + " div.title + div.content").appendTo("body").click(function(evt) {
        if (evt.target === modal[0]) {
          $.log('dialog: Cancelling because the modal was clicked.');
          return opts.cancel(modal);
        }
      });
      dialog = modal.find('.dialog', 1);
      modal.delegate(".cancel", "click", function(evt) {
        return opts.cancel(modal);
      }).delegate(".ok", "click", function(evt) {
        return opts.ok(modal);
      });
      contentNode = dialog.find('.content', 1);
      contentNode.append(createDialog.getContent(opts.contentType, opts.content));
      titleNode = dialog.find('.title', 1);
      titleNode.append(createDialog.getContent(opts.titleType, opts.title));
      $(opts.target).bind('resize', function(evt) {
        modal.fitOver(opts.target).fadeIn(200);
        return dialog.centerOn(modal).show();
      }).trigger('resize');
      return dialog;
    };
    createDialog.getDefaultOptions = function() {
      return {
        id: "dialog-" + $.random.string(4),
        target: "body",
        title: "Untitled Dialog",
        titleType: "text",
        content: "span 'Dialog Content'",
        contentType: "synth",
        ok: function(modal) {
          $.log("dialog: Closing from default ok");
          return modal.emit('ok').fadeOut(200, function() {
            return modal.remove();
          });
        },
        cancel: function(modal) {
          $.log("dialog: Closing from default cancel");
          return modal.emit('cancel').fadeOut(200, function() {
            return modal.remove();
          }).find(".dialog", 1).css({
            left: 0
          });
        }
      };
    };
    createDialog.getContent = function(type, stuff) {
      switch (type) {
        case "synth":
          return $.synth(stuff);
        case "html":
          return $.HTML.parse(stuff);
        case "text":
          return document.createTextNode(stuff);
      }
    };
    return {
      $: {
        dialog: createDialog
      },
      fitOver: function(elem) {
        var rect;
        if (elem == null) {
          elem = window;
        }
        if (elem === window) {
          rect = {
            width: window.innerWidth,
            height: window.innerHeight,
            top: 0,
            left: 0
          };
        } else {
          rect = $(elem).rect().first();
        }
        return this.css({
          position: 'absolute',
          width: $.px(rect.width),
          height: $.px(rect.height),
          top: $.px(rect.top),
          left: $.px(rect.left)
        });
      },
      centerOn: function(elem) {
        var left, target, top;
        if (elem == null) {
          elem = window;
        }
        if (elem === window) {
          target = {
            width: window.innerWidth,
            height: window.innerHeight,
            top: 0,
            left: 0
          };
        } else {
          target = $(elem).rect().first();
        }
        top = target.height / 2;
        left = target.width / 2;
        return this.each(function() {
          var dialog, rect;
          dialog = $(this);
          rect = dialog.rect().first();
          return dialog.css({
            top: $.px(top - (rect.height / 2)),
            left: $.px(left - (rect.width / 2))
          });
        });
      }
    };
  });

  $.plugin({
    depends: "core",
    provides: "diff"
  }, function() {
    var collapse, del, diff, diff_memo, ins, lev, lev_memo, sub;
    lev_memo = Object.create(null);
    lev = function(s, i, n, t, j, m, dw, iw, sw) {
      var _name, _name1;
      return lev_memo[_name = [s, i, n, t, j, m, dw, iw, sw]] != null ? lev_memo[_name] : lev_memo[_name] = lev_memo[_name1 = [t, j, m, s, i, n, dw, iw, sw]] != null ? lev_memo[_name1] : lev_memo[_name1] = (function() {
        switch (false) {
          case !(m <= 0):
            return n;
          case !(n <= 0):
            return m;
          default:
            return Math.min(dw + lev(s, i + 1, n - 1, t, j, m, dw, iw, sw), iw + lev(s, i, n, t, j + 1, m - 1, dw, iw, sw), (sw * (s[i] !== t[j])) + lev(s, i + 1, n - 1, t, j + 1, m - 1, dw, iw, sw));
        }
      })();
    };
    collapse = function(ops) {
      return $.inherit({
        toHTML: function() {
          return this.reduce((function(a, x) {
            return a += (function() {
              switch (x.op) {
                case 'ins':
                  return "<ins>" + x.v + "</ins>";
                case 'del':
                  return "<del>" + x.v + "</del>";
                case 'sub':
                  return "<del>" + x.v + "</del><ins>" + x.w + "</ins>";
                case 'sav':
                  return x.v;
              }
            })();
          }), "");
        }
      }, ops.reduce((function(a, x) {
        var last;
        if (x.op === 'sub' && x.v === x.w) {
          x.op = 'sav';
          delete x.w;
        }
        if (!a.length) {
          a.push(x);
        } else {
          if ((last = a.last()).op === x.op) {
            last.v += x.v;
            if (last.op === 'sub') {
              last.w += x.w;
            }
          } else {
            a.push(x);
          }
        }
        return a;
      }), $()));
    };
    diff_memo = Object.create(null);
    del = function(c) {
      return {
        op: 'del',
        v: c
      };
    };
    ins = function(c) {
      return {
        op: 'ins',
        v: c
      };
    };
    sub = function(c, d) {
      return {
        op: 'sub',
        v: c,
        w: d
      };
    };
    diff = function(s, i, n, t, j, m, dw, iw, sw) {
      var _name;
      return diff_memo[_name = [s, i, n, t, j, m, dw, iw, sw]] != null ? diff_memo[_name] : diff_memo[_name] = collapse((function() {
        var args, c, costs, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        switch (false) {
          case !(m <= 0):
            _ref = s.substr(i, n);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              c = _ref[_i];
              _results.push(del(c));
            }
            return _results;
            break;
          case !(n <= 0):
            _ref1 = t.substr(j, m);
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              c = _ref1[_j];
              _results1.push(ins(c));
            }
            return _results1;
            break;
          default:
            sw *= s[i] !== t[j];
            args = {
              del: [s + 0, i + 1, n - 1, t + 0, j + 0, m + 0, 1.00, 1.50, 1.50],
              ins: [s + 0, i + 0, n + 0, t + 0, j + 1, m - 1, 1.50, 1.00, 1.50],
              sub: [s + 0, i + 1, n - 1, t + 0, j + 1, m - 1, 1.00, 1.00, 1.00]
            };
            costs = {
              del: dw + lev.apply(null, args.del),
              ins: iw + lev.apply(null, args.ins),
              sub: sw + lev.apply(null, args.sub)
            };
            switch (Math.min(costs.del, costs.ins, costs.sub)) {
              case costs.del:
                return $(del(s[i])).concat(diff.apply(null, args.del));
              case costs.ins:
                return $(ins(t[j])).concat(diff.apply(null, args.ins));
              case costs.sub:
                return $(sub(s[i], t[j])).concat(diff.apply(null, args.sub));
            }
        }
      })());
    };
    return {
      $: {
        stringDistance: function(s, t) {
          return lev(s, 0, s.length, t, 0, t.length, 1, 1, 1);
        },
        stringDiff: function(s, t) {
          return diff(s, 0, s.length, t, 0, t.length, 1, 1, 1.5);
        }
      }
    };
  });

  if ($.global.document != null) {
    $.plugin({
      depends: "function,type,string",
      provides: "dom"
    }, function() {
      var after, bNodelistsAreSpecial, before, computeCSSProperty, escaper, getOrSetRect, parser, selectChain, toFrag, toNode;
      bNodelistsAreSpecial = false;
      $.type.register("nodelist", {
        is: function(o) {
          return (o != null) && $.isType("NodeList", o);
        },
        hash: function(o) {
          var i;
          return $((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = x.length; _i < _len; _i++) {
              i = x[_i];
              _results.push($.hash(i));
            }
            return _results;
          })()).sum();
        },
        array: (function() {
          var err;
          try {
            document.querySelectorAll("xxx").__proto__ = {};
            return $.identity;
          } catch (_error) {
            err = _error;
            bNodelistsAreSpecial = true;
            return function(o) {
              var node, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = o.length; _i < _len; _i++) {
                node = o[_i];
                _results.push(node);
              }
              return _results;
            };
          }
        })(),
        string: function(o) {
          return "{Nodelist:[" + $(o).select('nodeName').join(",") + "]}";
        },
        node: function(o) {
          return $(o).toFragment();
        }
      });
      $.type.register("node", {
        is: function(o) {
          return (o != null ? o.nodeType : void 0) > 0;
        },
        hash: function(o) {
          return $.checksum(o.nodeName) + $.hash(o.attributes) + $.checksum(o.innerHTML);
        },
        string: function(o) {
          return o.toString();
        },
        node: $.identity
      });
      $.type.register("fragment", {
        is: function(o) {
          return (o != null ? o.nodeType : void 0) === 11;
        },
        hash: function(o) {
          var x;
          return $((function() {
            var _i, _len, _ref, _results;
            _ref = o.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push($.hash(x));
            }
            return _results;
          })()).sum();
        },
        string: function(o) {
          return o.toString();
        },
        node: $.identity
      });
      $.type.register("html", {
        is: function(o) {
          var s;
          return typeof o === "string" && (s = o.trimLeft())[0] === "<" && s[s.length - 1] === ">";
        },
        node: function(h) {
          var childNodes, df, i, n, node, _i;
          (node = document.createElement('div')).innerHTML = h;
          if ((n = (childNodes = node.childNodes).length) === 1) {
            return node.removeChild(childNodes[0]);
          }
          df = document.createDocumentFragment();
          for (i = _i = 0; _i < n; i = _i += 1) {
            df.appendChild(node.removeChild(childNodes[0]));
          }
          return df;
        },
        array: function(o) {
          var h;
          return $.type.lookup(h = Bling.HTML.parse(o)).array(h);
        },
        string: function(o) {
          return "'" + o + "'";
        },
        repr: function(o) {
          return '"' + o + '"';
        }
      });
      $.type.extend({
        unknown: {
          node: function() {
            return null;
          }
        },
        bling: {
          node: function(o) {
            return o.toFragment();
          }
        },
        node: {
          html: function(n) {
            var d, ret;
            d = document.createElement("div");
            d.appendChild((n = n.cloneNode(true)));
            ret = d.innerHTML;
            d.removeChild(n);
            return ret;
          }
        },
        string: {
          node: function(o) {
            return $(o).toFragment();
          },
          array: (function() {
            if (bNodelistsAreSpecial) {
              return function(o) {
                var nl;
                return $.type.lookup(nl = document.querySelectorAll(o)).array(nl);
              };
            } else {
              return function(o) {
                return document.querySelectorAll(o);
              };
            }
          })()
        },
        "function": {
          node: function(o) {
            return $(o.toString()).toFragment();
          }
        }
      });
      toFrag = function(a) {
        var df;
        if (a.parentNode == null) {
          df = document.createDocumentFragment();
          df.appendChild(a);
        }
        return a;
      };
      before = function(a, b) {
        return toFrag(a).parentNode.insertBefore(b, a);
      };
      after = function(a, b) {
        return toFrag(a).parentNode.insertBefore(b, a.nextSibling);
      };
      toNode = function(x) {
        return $.type.lookup(x).node(x);
      };
      escaper = false;
      parser = false;
      $.computeCSSProperty = computeCSSProperty = function(k) {
        return function() {
          return $.global.getComputedStyle(this, null).getPropertyValue(k);
        };
      };
      getOrSetRect = function(p) {
        return function(x) {
          if (x != null) {
            return this.css(p, x);
          } else {
            return this.rect().select(p);
          }
        };
      };
      selectChain = function(prop) {
        return function() {
          return this.map(function(p) {
            return $((function() {
              var _results;
              _results = [];
              while (p = p[prop]) {
                _results.push(p);
              }
              return _results;
            })());
          });
        };
      };
      return {
        $: {
          HTML: {
            parse: function(h) {
              return $.type.lookup(h).node(h);
            },
            stringify: function(n) {
              return $.type.lookup(n).html(n);
            },
            escape: function(h) {
              var ret;
              escaper || (escaper = $("<div>&nbsp;</div>").child(0));
              ret = escaper.zap('data', h).select("parentNode.innerHTML").first();
              escaper.zap('data', '');
              return ret;
            }
          }
        },
        html: function(h) {
          switch ($.type(h)) {
            case "undefined":
            case "null":
              return this.select('innerHTML');
            case "string":
            case "html":
              return this.zap('innerHTML', h);
            case "bling":
              return this.html(h.toFragment());
            case "node":
              return this.each(function() {
                var _results;
                this.replaceChild(this.childNodes[0], h);
                _results = [];
                while (this.childNodes.length > 1) {
                  _results.push(this.removeChild(this.childNodes[1]));
                }
                return _results;
              });
          }
        },
        append: function(x) {
          x = toNode(x);
          return this.each(function(n) {
            return n != null ? typeof n.appendChild === "function" ? n.appendChild(x.cloneNode(true)) : void 0 : void 0;
          });
        },
        appendText: function(text) {
          var node;
          node = document.createTextNode(text);
          return this.each(function() {
            return this.appendChild(node.cloneNode(true));
          });
        },
        appendTo: function(x) {
          var clones, i;
          clones = this.map(function() {
            return this.cloneNode(true);
          });
          i = 0;
          $(x).each(function() {
            return this.appendChild(clones[i++]);
          });
          return clones;
        },
        prepend: function(x) {
          if (x != null) {
            x = toNode(x);
            this.take(1).each(function() {
              switch (false) {
                case !(this.childNodes.length > 0):
                  return before(this.childNodes[0], x);
                default:
                  return this.appendChild(x);
              }
            });
            this.skip(1).each(function() {
              switch (false) {
                case !this.childNodes.length:
                  return before(this.childNodes[0], x.cloneNode(true));
                default:
                  return this.appendChild(x.cloneNode(true));
              }
            });
          }
          return this;
        },
        prependTo: function(x) {
          if (x != null) {
            $(x).prepend(this);
          }
          return this;
        },
        before: function(x) {
          if (x != null) {
            x = toNode(x);
            this.take(1).each(function() {
              return before(this, x);
            });
            this.skip(1).each(function() {
              return before(this, x.cloneNode(true));
            });
          }
          return this;
        },
        after: function(x) {
          if (x != null) {
            x = toNode(x);
            this.take(1).each(function() {
              return after(this, x);
            });
            this.skip(1).each(function() {
              return after(this, x.cloneNode(true));
            });
          }
          return this;
        },
        wrap: function(parent) {
          parent = toNode(parent);
          if ($.is("fragment", parent)) {
            throw new Error("cannot call .wrap() with a fragment as the parent");
          }
          return this.each(function(child) {
            var grandpa, marker;
            if (($.is("fragment", child)) || !child.parentNode) {
              return parent.appendChild(child);
            }
            grandpa = child.parentNode;
            marker = document.createElement("dummy");
            parent.appendChild(grandpa.replaceChild(marker, child));
            return grandpa.replaceChild(parent, marker);
          });
        },
        unwrap: function() {
          return this.each(function() {
            if (this.parentNode && this.parentNode.parentNode) {
              return this.parentNode.parentNode.replaceChild(this, this.parentNode);
            } else if (this.parentNode) {
              return this.parentNode.removeChild(this);
            }
          });
        },
        replace: function(n) {
          var clones, i, r, _i, _ref, _ref1;
          if ($.is('regexp', n)) {
            r = arguments[1];
            return this.map(function(s) {
              return s.replace(n, r);
            });
          }
          n = toNode(n);
          clones = this.map(function() {
            return n.cloneNode(true);
          });
          for (i = _i = 0, _ref = clones.length; _i < _ref; i = _i += 1) {
            if ((_ref1 = this[i].parentNode) != null) {
              _ref1.replaceChild(clones[i], this[i]);
            }
          }
          return clones;
        },
        attr: function(a, v) {
          var k;
          if ($.is('object', a)) {
            for (k in a) {
              v = a[k];
              this.attr(k, v);
            }
          } else {
            switch (v) {
              case void 0:
                return this.select("getAttribute").call(a, v);
              case null:
                this.select("removeAttribute").call(a, v);
                this;
                break;
              default:
                this.select("setAttribute").call(a, v);
            }
          }
          return this;
        },
        data: function(k, v) {
          return this.attr("data-" + ($.dashize(k)), v);
        },
        addClass: function(x) {
          var notempty;
          notempty = function(y) {
            return y !== "";
          };
          return this.removeClass(x).each(function() {
            var c;
            c = this.className.split(" ").filter(notempty);
            c.push(x);
            return this.className = c.join(" ");
          });
        },
        removeClass: function(x) {
          var notx;
          notx = function(y) {
            return y !== x;
          };
          return this.each(function() {
            var c;
            c = this.className.split(" ").filter(notx).join(" ");
            if (c.length === 0) {
              return this.removeAttribute('class');
            }
          });
        },
        toggleClass: function(x) {
          var notx;
          notx = function(y) {
            return y !== x;
          };
          return this.each(function() {
            var c, cls, filter;
            cls = this.className.split(" ");
            filter = $.not($.isEmpty);
            if (cls.indexOf(x) > -1) {
              filter = $.and(notx, filter);
            } else {
              cls.push(x);
            }
            c = cls.filter(filter).join(" ");
            this.className = c;
            if (c.length === 0) {
              return this.removeAttribute('class');
            }
          });
        },
        hasClass: function(x) {
          return this.select('className.split').call(" ").select('indexOf').call(x).map(function(x) {
            return x > -1;
          });
        },
        text: function(t) {
          if (t != null) {
            return this.zap('textContent', t);
          }
          return this.select('textContent');
        },
        val: function(v) {
          if (v != null) {
            return this.zap('value', v);
          }
          return this.select('value');
        },
        css: function(key, v) {
          var i, k, n, nn, setters, values, _i, _ref;
          if ((v != null) || $.is('object', key)) {
            setters = this.select('style.setProperty');
            if ($.is("object", key)) {
              for (k in key) {
                v = key[k];
                setters.call(k, v, "");
              }
            } else if ($.is("array", v)) {
              for (i = _i = 0, _ref = n = Math.max(v.length, nn = setters.length); _i < _ref; i = _i += 1) {
                setters[i % nn](key, v[i % n], "");
              }
            } else if ($.is('function', v)) {
              values = this.select("style." + key).weave(this.map(computeCSSProperty(key))).fold($.coalesce).weave(setters).fold(function(setter, value) {
                return setter(key, v.call(value, value));
              });
            } else {
              setters.call(key, v, "");
            }
            return this;
          } else {
            return this.select("style." + key).weave(this.map(computeCSSProperty(key))).fold($.coalesce);
          }
        },
        defaultCss: function(k, v) {
          var i, sel, style;
          sel = this.selector;
          style = "";
          if ($.is("string", k)) {
            if ($.is("string", v)) {
              style += "" + sel + " { " + k + ": " + v + " } ";
            } else {
              throw Error("defaultCss requires a value with a string key");
            }
          } else if ($.is("object", k)) {
            for (i in k + "} ") {
              style += ("" + sel + " { ") + ("" + i + ": " + k[i] + "; ");
            }
          }
          $("<style></style>").text(style).appendTo("head");
          return this;
        },
        rect: function() {
          return this.map(function(item) {
            switch (item) {
              case window:
                return {
                  width: window.innerWidth,
                  height: window.innerHeight,
                  top: 0,
                  left: 0,
                  right: window.innerWidth,
                  bottom: window.innerHeight
                };
              default:
                return item.getBoundingClientRect();
            }
          });
        },
        width: getOrSetRect("width"),
        height: getOrSetRect("height"),
        top: getOrSetRect("top"),
        left: getOrSetRect("left"),
        bottom: getOrSetRect("bottom"),
        right: getOrSetRect("right"),
        position: function(left, top) {
          switch (false) {
            case !(left == null):
              return this.rect();
            case !(top == null):
              return this.css("left", $.px(left));
            default:
              return this.css({
                top: $.px(top),
                left: $.px(left)
              });
          }
        },
        scrollToCenter: function() {
          document.body.scrollTop = this[0].offsetTop - ($.global.innerHeight / 2);
          return this;
        },
        child: function(n) {
          return this.select('childNodes').map(function() {
            return this[n < 0 ? n + this.length : n];
          });
        },
        parents: selectChain('parentNode'),
        prev: selectChain('previousSibling'),
        next: selectChain('nextSibling'),
        remove: function() {
          return this.each(function() {
            var _ref;
            return (_ref = this.parentNode) != null ? _ref.removeChild(this) : void 0;
          });
        },
        find: function(css, limit) {
          if (limit == null) {
            limit = 0;
          }
          return this.filter("*").map((function() {
            switch (limit) {
              case 0:
                return function() {
                  return this.querySelectorAll(css);
                };
              case 1:
                return function() {
                  return $(this.querySelector(css));
                };
              default:
                return function() {
                  return $(this.querySelectorAll(css)).take(limit);
                };
            }
          })()).flatten();
        },
        querySelectorAll: function(expr) {
          return this.filter("*").reduce(function(a, i) {
            return a.extend(i.querySelectorAll(expr));
          }, $());
        },
        clone: function(deep) {
          if (deep == null) {
            deep = true;
          }
          return this.map(function() {
            if ($.is("node", this)) {
              return this.cloneNode(deep);
            }
          });
        },
        toFragment: function() {
          var df;
          if (this.length > 1) {
            df = document.createDocumentFragment();
            (this.map(toNode)).map(function(node) {
              return df.appendChild(node);
            });
            return df;
          }
          return toNode(this[0]);
        }
      };
    });
  }

  $.plugin({
    provides: "EventEmitter",
    depends: "type,hook"
  }, function() {
    return {
      $: {
        EventEmitter: Bling.init.append(function(obj) {
          var add, list, listeners;
          if (obj == null) {
            obj = {};
          }
          listeners = Object.create(null);
          list = function(e) {
            return listeners[e] || (listeners[e] = []);
          };
          return $.inherit({
            emit: function() {
              var a, e, f, _i, _len, _ref;
              e = arguments[0], a = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
              _ref = list(e);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                f = _ref[_i];
                f.apply(this, a);
              }
              return this;
            },
            on: add = function(e, f) {
              var k, v;
              switch ($.type(e)) {
                case 'object':
                  for (k in e) {
                    v = e[k];
                    this.addListener(k, v);
                  }
                  break;
                case 'string':
                  list(e).push(f);
                  this.emit('newListener', e, f);
              }
              return this;
            },
            addListener: add,
            removeListener: function(e, f) {
              var i, l;
              if ((i = (l = list(e)).indexOf(f)) > -1) {
                return l.splice(i, 1);
              }
            },
            removeAllListeners: function(e) {
              return listeners[e] = [];
            },
            setMaxListeners: function(n) {},
            listeners: function(e) {
              return list(e).slice(0);
            }
          }, obj);
        })
      }
    };
  });

  $.plugin({
    depends: "dom,function,core",
    provides: "event"
  }, function() {
    var EVENTSEP_RE, bindReady, binder, events, register_live, ret, triggerReady, unregister_live;
    EVENTSEP_RE = /,* +/;
    events = ['mousemove', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'blur', 'focus', 'load', 'unload', 'reset', 'submit', 'keyup', 'keydown', 'keypress', 'change', 'abort', 'cut', 'copy', 'paste', 'selection', 'drag', 'drop', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'gesturestart', 'gestureend', 'gesturecancel', 'hashchange'];
    binder = function(e) {
      return function(f) {
        if ($.is("function", f)) {
          return this.bind(e, f);
        } else {
          return this.trigger(e, f);
        }
      };
    };
    register_live = function(selector, context, evt, f, h) {
      return $(context).bind(evt, h).each(function() {
        var _base, _base1;
        return ((_base = ((_base1 = (this.__alive__ || (this.__alive__ = {})))[selector] || (_base1[selector] = {})))[evt] || (_base[evt] = {}))[f] = h;
      });
    };
    unregister_live = function(selector, context, e, f) {
      var $c;
      $c = $(context);
      return $c.each(function() {
        var a, b, c;
        a = (this.__alive__ || (this.__alive__ = {}));
        b = (a[selector] || (a[selector] = {}));
        c = (b[e] || (b[e] = {}));
        $c.unbind(e, c[f]);
        return delete c[f];
      });
    };
    triggerReady = $.once(function() {
      var _base;
      $(document).trigger("ready").unbind("ready");
      if (typeof document.removeEventListener === "function") {
        document.removeEventListener("DOMContentLoaded", triggerReady, false);
      }
      return typeof (_base = $.global).removeEventListener === "function" ? _base.removeEventListener("load", triggerReady, false) : void 0;
    });
    bindReady = $.once(function() {
      var _base;
      if (typeof document.addEventListener === "function") {
        document.addEventListener("DOMContentLoaded", triggerReady, false);
      }
      return typeof (_base = $.global).addEventListener === "function" ? _base.addEventListener("load", triggerReady, false) : void 0;
    });
    bindReady();
    ret = {
      bind: function(e, f) {
        var c, h;
        c = (e || "").split(EVENTSEP_RE);
        h = function(evt) {
          ret = f.apply(this, arguments);
          if (ret === false) {
            evt.preventAll();
          }
          return ret;
        };
        return this.each(function() {
          var i, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = c.length; _i < _len; _i++) {
            i = c[_i];
            _results.push(this.addEventListener(i, h, true));
          }
          return _results;
        });
      },
      unbind: function(e, f) {
        var c;
        c = (e || "").split(EVENTSEP_RE);
        return this.each(function() {
          var i, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = c.length; _i < _len; _i++) {
            i = c[_i];
            _results.push(this.removeEventListener(i, f, true));
          }
          return _results;
        });
      },
      trigger: function(evt, args) {
        var e, evt_i, _i, _len, _ref;
        if (args == null) {
          args = {};
        }
        args = $.extend({
          bubbles: true,
          cancelable: true
        }, args);
        _ref = (evt || "").split(EVENTSEP_RE);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          evt_i = _ref[_i];
          switch (evt_i) {
            case "click":
            case "mousemove":
            case "mousedown":
            case "mouseup":
            case "mouseover":
            case "mouseout":
              e = document.createEvent("MouseEvents");
              args = $.extend({
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                button: 0,
                relatedTarget: null
              }, args);
              e.initMouseEvent(evt_i, args.bubbles, args.cancelable, $.global, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget);
              break;
            case "blur":
            case "focus":
            case "reset":
            case "submit":
            case "abort":
            case "change":
            case "load":
            case "unload":
              e = document.createEvent("UIEvents");
              e.initUIEvent(evt_i, args.bubbles, args.cancelable, $.global, 1);
              break;
            case "touchstart":
            case "touchmove":
            case "touchend":
            case "touchcancel":
              e = document.createEvent("TouchEvents");
              args = $.extend({
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                touches: [],
                targetTouches: [],
                changedTouches: [],
                scale: 1.0,
                rotation: 0.0
              }, args);
              e.initTouchEvent(evt_i, args.bubbles, args.cancelable, $.global, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches, args.changedTouches, args.scale, args.rotation);
              break;
            case "gesturestart":
            case "gestureend":
            case "gesturecancel":
              e = document.createEvent("GestureEvents");
              args = $.extend({
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                target: null,
                scale: 1.0,
                rotation: 0.0
              }, args);
              e.initGestureEvent(evt_i, args.bubbles, args.cancelable, $.global, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.target, args.scale, args.rotation);
              break;
            case "keydown":
            case "keypress":
            case "keyup":
              e = document.createEvent("KeyboardEvents");
              args = $.extend({
                view: null,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                keyCode: 0,
                charCode: 0
              }, args);
              e.initKeyboardEvent(evt_i, args.bubbles, args.cancelable, $.global, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.keyCode, args.charCode);
              break;
            default:
              e = document.createEvent("Events");
              e.initEvent(evt_i, args.bubbles, args.cancelable);
              e = $.extend(e, args);
          }
          if (!e) {
            continue;
          } else {
            this.each(function() {
              var err;
              try {
                return this.dispatchEvent(e);
              } catch (_error) {
                err = _error;
                return $.log("dispatchEvent error:", err);
              }
            });
          }
        }
        return this;
      },
      delegate: function(selector, e, f) {
        var context;
        context = this;
        return register_live(selector, context, e, f, function(evt) {
          return context.find(selector).intersect($(evt.target).parents().first().union($(evt.target))).each(function() {
            return f.call(evt.target = this, evt);
          });
        });
      },
      undelegate: function(selector, e, f) {
        return this.unbind(e, unregister_live(selector, this, e, f));
      },
      click: function(f) {
        var _ref;
        if (f == null) {
          f = {};
        }
        if ((_ref = this.css("cursor")) === "auto" || _ref === "") {
          this.css("cursor", "pointer");
        }
        if ($.is("function", f)) {
          this.bind('click', f);
        } else {
          this.trigger('click', f);
        }
        return this;
      },
      ready: function(f) {
        if (triggerReady.exhausted) {
          return f.call(this);
        }
        return this.bind("ready", f);
      }
    };
    events.forEach(function(x) {
      return ret[x] = binder(x);
    });
    return ret;
  });

  $.plugin({
    provides: "function",
    depends: "hash"
  }, function() {
    return {
      $: {
        identity: function(o) {
          return o;
        },
        not: function(f) {
          return function() {
            return !f.apply(this, arguments);
          };
        },
        compose: function(f, g) {
          return function(x) {
            var y;
            return f.call(y, (y = g.call(x, x)));
          };
        },
        and: function(f, g) {
          return function(x) {
            return g.call(this, x) && f.call(this, x);
          };
        },
        once: function(f, n) {
          if (n == null) {
            n = 1;
          }
          return $.defineProperty((function() {
            if (n-- > 0) {
              return f.apply(this, arguments);
            }
          }), "exhausted", {
            get: function() {
              return n <= 0;
            }
          });
        },
        cycle: function() {
          var f, i;
          f = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          i = -1;
          return function() {
            return f[i = ++i % f.length].apply(this, arguments);
          };
        },
        bound: function(t, f, args) {
          var r;
          if (args == null) {
            args = [];
          }
          if (f == null) {
            return $.identity;
          }
          if ($.is("function", f.bind)) {
            args.splice(0, 0, t);
            r = f.bind.apply(f, args);
          } else {
            r = function() {
              var a;
              a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return f.apply(t, (args.length ? args : a));
            };
          }
          return $.extend(r, {
            toString: function() {
              return "bound-method of " + t + "." + f.name;
            }
          });
        },
        partial: function() {
          var a, f;
          f = arguments[0], a = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          return function() {
            var b;
            b = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return f.apply(null, __slice.call(a).concat(__slice.call(b)));
          };
        }
      },
      partial: function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.map(function(f) {
          return $.partial.apply($, [f].concat(__slice.call(a)));
        });
      }
    };
  });

  $.plugin({
    provides: "groupBy"
  }, function() {
    return {
      groupBy: function(key) {
        var groups;
        groups = {};
        switch ($.type(key)) {
          case 'array':
          case 'bling':
            this.each(function() {
              var c, k;
              c = ((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = key.length; _i < _len; _i++) {
                  k = key[_i];
                  _results.push(this[k]);
                }
                return _results;
              }).call(this)).join(",");
              return (groups[c] || (groups[c] = $())).push(this);
            });
            break;
          default:
            this.each(function() {
              var _name;
              return (groups[_name = this[key]] || (groups[_name] = $())).push(this);
            });
        }
        return $.valuesOf(groups);
      }
    };
  });

  $.plugin({
    provides: "hash",
    depends: "type"
  }, function() {
    var array_hash, maxHash;
    maxHash = Math.pow(2, 32);
    $.type.extend({
      unknown: {
        hash: function(o) {
          return $.checksum($.toString(o));
        }
      },
      object: {
        hash: function(o) {
          var k, v;
          return 1970931729 + $((function() {
            var _results;
            _results = [];
            for (k in o) {
              v = o[k];
              _results.push($.hash(k) + $.hash(v));
            }
            return _results;
          })()).sum();
        }
      },
      array: {
        hash: array_hash = function(o) {
          var x;
          return 1816922041 + $((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              x = o[_i];
              _results.push($.hash(x));
            }
            return _results;
          })()).reduce((function(a, x) {
            return ((a * a) + (x | 0)) % maxHash;
          }), 1);
        }
      },
      "arguments": {
        hash: function(o) {
          return 298517431 + array_hash(o);
        }
      },
      bool: {
        hash: function(o) {
          return parseInt(o ? 1 : void 0);
        }
      }
    });
    return {
      $: {
        hash: function(x) {
          return $.type.lookup(x).hash(x);
        }
      },
      hash: function() {
        return $.hash(this);
      }
    };
  });

  $.plugin(function() {
    return {
      $: {
        histogram: function(data, bucket_width, output_width) {
          var buckets, end, i, len, m, max, mean, min, n, pct, pct_sum, ret, sum, total, x, _i, _j, _len;
          if (bucket_width == null) {
            bucket_width = 1;
          }
          if (output_width == null) {
            output_width = 60;
          }
          buckets = $();
          len = 0;
          min = Infinity;
          mean = 0;
          max = 0;
          total = 0;
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            x = data[_i];
            min = Math.min(x, min);
            max = Math.max(x, max);
            total += x;
            i = Math.floor(x / bucket_width);
            if (i in buckets) {
              buckets[i] += 1;
            } else {
              buckets[i] = 1;
            }
            len = Math.max(len, i + 1);
          }
          buckets.length = len;
          mean = total / data.length;
          m = buckets.max();
          buckets = buckets.or(0).scale(1 / m).scale(output_width);
          sum = buckets.sum();
          ret = "";
          pct_sum = 0;
          for (n = _j = 0; _j < len; n = _j += 1) {
            end = (n + 1) * bucket_width;
            pct = buckets[n] * 100 / sum;
            pct_sum += pct;
            ret += $.padLeft(pct_sum.toFixed(2) + "%", 7) + $.padRight(" < " + (end.toFixed(2)), 10) + ": " + $.repeat("#", buckets[n]) + "\n";
          }
          return ret + ("N: " + data.length + " Min: " + (min.toFixed(2)) + " Max: " + (max.toFixed(2)) + " Mean: " + (mean.toFixed(2)));
        }
      },
      histogram: function() {
        return $.histogram(this);
      }
    };
  });

  $.plugin({
    provides: "hook",
    depends: "type"
  }, function() {
    var hook;
    hook = function() {
      var chain;
      chain = [];
      return $.extend((function(args) {
        var func, _i, _len;
        for (_i = 0, _len = chain.length; _i < _len; _i++) {
          func = chain[_i];
          args = func.call(this, args);
        }
        return args;
      }), {
        prepend: function(obj) {
          chain.unshift(obj);
          return obj;
        },
        append: function(obj) {
          chain.push(obj);
          return obj;
        }
      });
    };
    Bling.init = hook();
    return {
      $: {
        hook: hook
      }
    };
  });

  $.plugin({
    depends: "dom",
    provides: "http"
  }, function() {
    var formencode;
    formencode = function(obj) {
      var i, o;
      if ($.is('object', obj)) {
        o = JSON.parse(JSON.stringify(obj));
        return ((function() {
          var _results;
          _results = [];
          for (i in o) {
            _results.push("" + i + "=" + (escape(o[i])));
          }
          return _results;
        })()).join("&");
      } else {
        return obj;
      }
    };
    $.type.register("http", {
      is: function(o) {
        return $.isType('XMLHttpRequest', o);
      },
      array: function(o) {
        return [o];
      }
    });
    return {
      $: {
        http: function(url, opts) {
          var k, v, xhr, _ref;
          if (opts == null) {
            opts = {};
          }
          xhr = new XMLHttpRequest();
          if ($.is("function", opts)) {
            opts = {
              success: $.bound(xhr, opts)
            };
          }
          opts = $.extend({
            method: "GET",
            data: null,
            state: $.identity,
            success: $.identity,
            error: $.identity,
            async: true,
            asBlob: false,
            timeout: 0,
            followRedirects: false,
            withCredentials: false,
            headers: {}
          }, opts);
          opts.state = $.bound(xhr, opts.state);
          opts.success = $.bound(xhr, opts.success);
          opts.error = $.bound(xhr, opts.error);
          if (opts.data && opts.method === "GET") {
            url += "?" + formencode(opts.data);
          } else if (opts.data && opts.method === "POST") {
            opts.data = formencode(opts.data);
          }
          xhr.open(opts.method, url, opts.async);
          xhr = $.extend(xhr, {
            asBlob: opts.asBlob,
            timeout: opts.timeout,
            followRedirects: opts.followRedirects,
            withCredentials: opts.withCredentials,
            onreadystatechange: function() {
              if (typeof opts.state === "function") {
                opts.state();
              }
              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  return opts.success(xhr.responseText);
                } else {
                  return opts.error(xhr.status, xhr.statusText);
                }
              }
            }
          });
          _ref = opts.headers;
          for (k in _ref) {
            v = _ref[k];
            xhr.setRequestHeader(k, v);
          }
          xhr.send(opts.data);
          return $(xhr);
        },
        post: function(url, opts) {
          if (opts == null) {
            opts = {};
          }
          if ($.is("function", opts)) {
            opts = {
              success: opts
            };
          }
          opts.method = "POST";
          return $.http(url, opts);
        },
        get: function(url, opts) {
          if (opts == null) {
            opts = {};
          }
          if ($.is("function", opts)) {
            opts = {
              success: opts
            };
          }
          opts.method = "GET";
          return $.http(url, opts);
        }
      }
    };
  });

  $.depends('hook', function() {
    return Bling.init.append(function(obj) {
      var keyMakers, map;
      map = Object.create(null);
      keyMakers = [];
      return $.inherit({
        index: function(keyFunc) {
          if (keyMakers.indexOf(keyFunc) === -1) {
            keyMakers.push(keyFunc);
            map[keyFunc] = Object.create(null);
          }
          return this.each(function(x) {
            return map[keyFunc][keyFunc(x)] = x;
          });
        },
        query: function(criteria) {
          var key, keyMaker, _i, _len;
          for (_i = 0, _len = keyMakers.length; _i < _len; _i++) {
            keyMaker = keyMakers[_i];
            key = keyMaker(criteria);
            if (key in map[keyMaker]) {
              return map[keyMaker][key];
            }
          }
          return null;
        }
      }, obj);
    });
  });

  $.plugin({
    provides: 'keyName,keyNames',
    depends: "math"
  }, function() {
    var a, code, keyCode, keyName, name, _i, _j, _len, _len1, _ref, _ref1;
    keyCode = {
      "Backspace": 8,
      "BS": 8,
      "Tab": 9,
      '\t': 9,
      "Enter": 13,
      '\n': 12,
      "Shift": 16,
      "Ctrl": 17,
      "Alt": 18,
      "Pause": 19,
      "Break": 19,
      "Caps": 20,
      "Caps Lock": 20,
      "Esc": 27,
      "Escape": 27,
      "Space": 32,
      " ": 32,
      "PgUp": 33,
      "Page Up": 33,
      "PgDn": 34,
      "End": 35,
      "Home": 36,
      "Left": 37,
      "Up": 38,
      "Right": 39,
      "Down": 40,
      "Insert": 45,
      "Del": 46,
      "Delete": 46,
      "Times": 106,
      "*": 106,
      "Plus": 107,
      "+": 107,
      "Minus": 109,
      "-": 109,
      "Div": 111,
      "Divide": 111,
      "/": 111,
      "Semi-Colon": 186,
      ";": 187,
      "Equal": 187,
      "=": 187,
      "Comma": 188,
      ",": 188,
      "Dash": 189,
      "-": 189,
      "Dot": 190,
      "Period": 190,
      ".": 190,
      "Forward Slash": 191,
      "/": 191,
      "Back Slash": 220,
      "\\": 220,
      "Single Quote": 222,
      "'": 222
    };
    _ref = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      keyCode[a] = keyCode[a.toLowerCase()] = a.charCodeAt(0);
    }
    _ref1 = $.range(1, 13);
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      a = _ref1[_j];
      keyCode["F" + a] = keyCode["f" + a] = 111 + a;
    }
    keyName = {};
    for (name in keyCode) {
      code = keyCode[name];
      keyName[code] || (keyName[code] = name);
    }
    return {
      $: {
        keyCode: function(name) {
          var _ref2;
          return (_ref2 = keyCode[name]) != null ? _ref2 : name;
        },
        keyName: function(code) {
          var _ref2;
          return (_ref2 = keyName[code]) != null ? _ref2 : code;
        }
      }
    };
  });

  $.plugin({
    depends: "dom,promise",
    provides: "lazy"
  }, function() {
    var lazy_load;
    lazy_load = function(elementName, props) {
      var elem, ret;
      ret = $.Promise();
      document.head.appendChild(elem = $.extend(document.createElement(elementName), props, {
        onload: function() {
          return ret.resolve(elem);
        },
        onerror: function() {
          return ret.reject.apply(ret, arguments);
        }
      }));
      return ret;
    };
    return {
      $: {
        script: function(src) {
          return lazy_load("script", {
            src: src
          });
        },
        style: function(src) {
          return lazy_load("link", {
            href: src,
            rel: "stylesheet"
          });
        }
      }
    };
  });

  $.plugin({
    provides: "matches"
  }, function() {
    var matches;
    matches = function(pattern, obj) {
      var k, v;
      switch ($.type(pattern)) {
        case 'function':
          if (pattern === matches.Any) {
            return true;
          }
          return obj === pattern;
        case 'regexp':
          return pattern.test(obj);
        case 'object':
        case 'array':
          if (obj == null) {
            return false;
          }
          for (k in pattern) {
            v = pattern[k];
            if (!matches(v, obj[k])) {
              return false;
            }
          }
          return true;
        default:
          return obj === pattern;
      }
    };
    matches.Any = (function() {
      function Any() {}

      return Any;

    })();
    return {
      $: {
        matches: matches
      }
    };
  });

  $.plugin({
    provides: "math",
    depends: "core"
  }, function() {
    var add, mean, sub, _By;
    $.type.extend({
      bool: {
        number: function(o) {
          if (o) {
            return 1;
          } else {
            return 0;
          }
        }
      },
      number: {
        bool: function(o) {
          return !!o;
        }
      }
    });
    _By = function(cmp) {
      return function(field) {
        var valueOf, x;
        valueOf = (function() {
          switch ($.type(field)) {
            case "string":
              return function(o) {
                return o[field];
              };
            case "function":
              return field;
            default:
              throw new Error(".maxBy first argument should be a string or function");
          }
        })();
        x = this.first();
        this.skip(1).each(function() {
          if (cmp(valueOf(this), valueOf(x))) {
            return x = this;
          }
        });
        return x;
      };
    };
    return {
      $: {
        range: function(start, end, step) {
          var i;
          if (step == null) {
            step = 1;
          }
          if (end == null) {
            end = start;
            start = 0;
          }
          if (end < start && step > 0) {
            step *= -1;
          }
          return $((function() {
            var _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = Math.ceil((end - start) / step); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              _results.push(start + (i * step));
            }
            return _results;
          })());
        },
        zeros: function(n, z) {
          var i;
          if (z == null) {
            z = 0;
          }
          return $((function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
              _results.push(z);
            }
            return _results;
          })());
        },
        ones: function(n) {
          var i;
          return $((function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
              _results.push(1);
            }
            return _results;
          })());
        },
        deg2rad: function(n) {
          return n * Math.PI / 180;
        },
        rad2deg: function(n) {
          return n * 180 / Math.PI;
        }
      },
      floats: function() {
        return this.map(parseFloat);
      },
      ints: function() {
        return this.map(function() {
          return parseInt(this, 10);
        });
      },
      px: function(delta) {
        return this.ints().map(function() {
          return $.px(this, delta);
        });
      },
      min: function() {
        return this.filter(isFinite).reduce(Math.min);
      },
      max: function() {
        return this.filter(isFinite).reduce(Math.max);
      },
      maxBy: _By(function(a, b) {
        return a > b;
      }),
      minBy: _By(function(a, b) {
        return a < b;
      }),
      mean: mean = function() {
        if (!this.length) {
          return 0;
        } else {
          return this.sum() / this.length;
        }
      },
      avg: mean,
      sum: function() {
        return this.filter(isFinite).reduce((function(a) {
          return a + this;
        }), 0);
      },
      product: function() {
        return this.filter(isFinite).reduce(function(a) {
          return a * this;
        });
      },
      squares: function() {
        return this.pow(2);
      },
      pow: function(n) {
        return this.map(function() {
          return Math.pow(this, n);
        });
      },
      magnitude: function() {
        return Math.sqrt(this.floats().squares().sum());
      },
      scale: function(r) {
        return this.map(function() {
          return r * this;
        });
      },
      add: add = function(d) {
        var i;
        switch ($.type(d)) {
          case "number":
            return this.map(function() {
              return d + this;
            });
          case "bling":
          case "array":
            return $((function() {
              var _i, _ref, _results;
              _results = [];
              for (i = _i = 0, _ref = Math.min(this.length, d.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                _results.push(this[i] + d[i]);
              }
              return _results;
            }).call(this));
        }
      },
      plus: add,
      sub: sub = function(d) {
        var i;
        switch ($.type(d)) {
          case "number":
            return this.map(function() {
              return this - d;
            });
          case "bling":
          case "array":
            return $((function() {
              var _i, _ref, _results;
              _results = [];
              for (i = _i = 0, _ref = Math.min(this.length, d.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                _results.push(this[i] - d[i]);
              }
              return _results;
            }).call(this));
        }
      },
      minus: sub,
      dot: function(b) {
        var i;
        return $.sum((function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = Math.min(this.length, b.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(this[i] * b[i]);
          }
          return _results;
        }).call(this));
      },
      angle: function(b) {
        return Math.acos(this.dot(b) / (this.magnitude() * b.magnitude()));
      },
      cross: function(b) {
        return $(this[1] * b[2] - this[2] * b[1], this[2] * b[0] - this[0] * b[2], this[0] * b[1] - this[1] * b[0]);
      },
      normalize: function() {
        return this.scale(1 / this.magnitude());
      },
      deg2rad: function() {
        return this.filter(isFinite).map(function() {
          return this * Math.PI / 180;
        });
      },
      rad2deg: function() {
        return this.filter(isFinite).map(function() {
          return this * 180 / Math.PI;
        });
      }
    };
  });

  $.plugin({
    depends: 'function,hash',
    provides: 'memoize'
  }, function() {
    var plainCache;
    plainCache = function() {
      var data;
      data = {};
      return {
        has: function(k) {
          return k in data;
        },
        get: function(k) {
          return data[k];
        },
        set: function(k, v) {
          return data[k] = v;
        }
      };
    };
    return {
      $: {
        memoize: function(opts) {
          if ($.is('function', opts)) {
            opts = {
              f: opts
            };
          }
          if (!$.is('object', opts)) {
            throw new Error("Argument Error: memoize requires either a function or object as first argument");
          }
          opts.cache || (opts.cache = plainCache());
          opts.hash || (opts.hash = $.hash);
          return function() {
            var key;
            key = opts.hash(arguments);
            if (opts.cache.has(key)) {
              return opts.cache.get(key);
            } else {
              return opts.cache.set(key, opts.f.apply(this, arguments));
            }
          };
        }
      }
    };
  });

  $.plugin({
    depends: "core,function",
    provides: "promise"
  }, function() {
    var NoValue, Progress, Promise;
    NoValue = (function() {
      function NoValue() {}

      return NoValue;

    })();
    Promise = function(obj) {
      var consume_all, consume_one, end, err, getState, isFailed, isFinished, result, ret, waiting;
      if (obj == null) {
        obj = {};
      }
      waiting = new Array();
      err = result = NoValue;
      consume_all = function(e, v) {
        var w;
        while (w = waiting.shift()) {
          consume_one(w, e, v);
        }
        return null;
      };
      consume_one = function(cb, e, v) {
        var __e, _e, _ref;
        if ((_ref = cb.timeout) != null) {
          _ref.cancel();
        }
        try {
          cb(e, v);
        } catch (_error) {
          _e = _error;
          try {
            cb(_e, null);
          } catch (_error) {
            __e = _error;
            $.log("Fatal error in promise callback:", __e != null ? __e.stack : void 0, "caused by:", _e != null ? _e.stack : void 0);
          }
        }
        return null;
      };
      end = (function(_this) {
        return function(error, value) {
          if ((err === result && result === NoValue)) {
            if (error !== NoValue) {
              err = error;
            } else if (value !== NoValue) {
              result = value;
            }
            switch (false) {
              case value !== _this:
                return end(new TypeError("cant resolve a promise with itself"));
              case !$.is('promise', value):
                value.wait(end);
                return _this;
                break;
              case error === NoValue:
                consume_all(error, null);
                break;
              case value === NoValue:
                consume_all(null, value);
            }
          }
          return _this;
        };
      })(this);
      ret = $.inherit({
        promiseId: $.random.string(6),
        wait: function(timeout, cb) {
          var _ref;
          if ($.is('function', timeout)) {
            _ref = [timeout, Infinity], cb = _ref[0], timeout = _ref[1];
          }
          if (err !== NoValue) {
            $.immediate(function() {
              return consume_one(cb, err, null);
            });
          } else if (result !== NoValue) {
            $.immediate(function() {
              return consume_one(cb, null, result);
            });
          } else {
            waiting.push(cb);
            if (isFinite(parseFloat(timeout))) {
              cb.timeout = $.delay(timeout, function() {
                var i;
                if ((i = waiting.indexOf(cb)) > -1) {
                  waiting.splice(i, 1);
                  return consume_one(cb, err = 'timeout', void 0);
                }
              });
            }
          }
          return this;
        },
        then: function(f, e) {
          return this.wait(function(err, x) {
            if (err) {
              return typeof e === "function" ? e(err) : void 0;
            } else {
              return f(x);
            }
          });
        },
        finish: function(value) {
          end(NoValue, value);
          return this;
        },
        resolve: function(value) {
          end(NoValue, value);
          return this;
        },
        fail: function(error) {
          end(error, NoValue);
          return this;
        },
        reject: function(error) {
          end(error, NoValue);
          return this;
        },
        reset: function() {
          err = result = NoValue;
          return this;
        },
        handler: function(err, data) {
          if (err) {
            return ret.reject(err);
          } else {
            return ret.resolve(data);
          }
        },
        inspect: function() {
          return "{Promise[" + this.promiseId + "] " + (getState()) + "}";
        }
      }, $.EventEmitter(obj));
      getState = function() {
        switch (false) {
          case result === NoValue:
            return "resolved";
          case err === NoValue:
            return "rejected";
          default:
            return "pending";
        }
      };
      isFinished = function() {
        return result !== NoValue;
      };
      $.defineProperty(ret, 'finished', {
        get: isFinished
      });
      $.defineProperty(ret, 'resolved', {
        get: isFinished
      });
      isFailed = function() {
        return err !== NoValue;
      };
      $.defineProperty(ret, 'failed', {
        get: isFailed
      });
      $.defineProperty(ret, 'rejected', {
        get: isFailed
      });
      return ret;
    };
    Promise.compose = Promise.parallel = function() {
      var p, promises;
      promises = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      p = $.Progress(1 + promises.length);
      $(promises).select('wait').call(function(err, data) {
        if (err) {
          return p.reject(err);
        } else {
          return p.resolve(1);
        }
      });
      return p.resolve(1);
    };
    Promise.collect = function(promises) {
      var i, p, promise, q, ret, _fn, _i, _len;
      ret = [];
      p = $.Promise();
      if (promises == null) {
        return p.resolve(ret);
      }
      q = $.Progress(1 + promises.length);
      _fn = function(i) {
        return promise.wait(function(err, result) {
          ret[i] = err != null ? err : result;
          return q.resolve(1);
        });
      };
      for (i = _i = 0, _len = promises.length; _i < _len; i = ++_i) {
        promise = promises[i];
        _fn(i);
      }
      q.then(function() {
        return p.resolve(ret);
      });
      q.resolve(1);
      return p;
    };
    Promise.wrapCall = function() {
      var args, f, p;
      f = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      try {
        return p = $.Promise();
      } finally {
        args.push(function(err, result) {
          if (err) {
            return p.reject(err);
          } else {
            return p.resolve(result);
          }
        });
        $.immediate(function() {
          return f.apply(null, args);
        });
      }
    };
    Progress = function(max) {
      var cur;
      if (max == null) {
        max = 1.0;
      }
      cur = 0.0;
      return $.inherit({
        progress: function() {
          var args, item, _ref, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (!args.length) {
            return cur;
          }
          cur = (_ref = args[0]) != null ? _ref : cur;
          if (args.length > 1) {
            max = (_ref1 = args[1]) != null ? _ref1 : max;
          }
          item = args.length > 2 ? args[2] : max;
          if (cur >= max) {
            this.__proto__.__proto__.resolve(item);
          }
          this.emit('progress', cur, max, item);
          return this;
        },
        resolve: function(delta) {
          var item;
          item = delta;
          if (!isFinite(delta)) {
            delta = 1;
          }
          return this.progress(cur + delta, max, item);
        },
        finish: function(delta) {
          return this.resolve(delta);
        },
        include: function(promise) {
          this.progress(cur, max + 1);
          return promise.wait((function(_this) {
            return function(err) {
              if (err) {
                return _this.reject(err);
              } else {
                return _this.resolve(1);
              }
            };
          })(this));
        },
        inspect: function() {
          return "{Progress[" + this.promiseId + "] " + cur + "/" + max + "}";
        }
      }, Promise());
    };
    Promise.xhr = function(xhr) {
      var p;
      try {
        return p = $.Promise();
      } finally {
        xhr.onreadystatechange = function() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              return p.resolve(xhr.responseText);
            } else {
              return p.resolve("" + this.status + " " + this.statusText);
            }
          }
        };
      }
    };
    $.depend('dom', function() {
      return Promise.image = function(src) {
        var image, p;
        try {
          return p = $.Promise();
        } finally {
          $.extend(image = new Image(), {
            onerror: function(e) {
              return p.resolve(e);
            },
            onload: function() {
              return p.resolve(image);
            },
            src: src
          });
        }
      };
    });
    $.depend('type', function() {
      return $.type.register('promise', {
        is: function(o) {
          var err;
          try {
            return (typeof o === 'object') && 'then' in o;
          } catch (_error) {
            err = _error;
            return false;
          }
        }
      });
    });
    return {
      $: {
        Promise: Promise,
        Progress: Progress
      }
    };
  });

  $.plugin({
    provides: 'prompt,confirm',
    depends: 'synth,keyName'
  }, function() {
    var _confirm, _prompt, _prompt_css;
    _prompt_css = function() {
      if (!$("head .prompt").length) {
        return $("head").append("<style class='prompt'>" + $.CSS.stringify({
          ".prompt": {
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            zIndex: "999999",
            background: "rgba(0,0,0,.4)",
            fontSize: "12px",
            " input": {
              padding: "2px",
              margin: "0px 0px 4px -4px",
              width: "100%"
            },
            " button": {
              fontSize: "13px",
              ".done": {
                fontSize: "14px"
              }
            },
            " > center": {
              width: "200px",
              height: "44px",
              margin: "20px auto",
              padding: "16px",
              background: "#ffc",
              borderRadius: "5px"
            }
          }
        }) + "</style>");
      }
    };
    _prompt = function(label, type, cb) {
      var cancelButton, dialog, done, doneButton, input;
      _prompt_css();
      dialog = $.synth("div.prompt center\n	input[type=" + type + "][placeholder=" + label + "] + br +\n	button.cancel 'Cancel' +\n	button.done 'Done'").appendTo("body").first();
      input = dialog.querySelector("input");
      input.onkeydown = function(evt) {
        switch ($.keyName(evt.keyCode)) {
          case "Enter":
            return done(input.value);
          case "Esc":
            return done(null);
        }
      };
      doneButton = dialog.querySelector("button.done");
      cancelButton = dialog.querySelector("button.cancel");
      done = function(value) {
        delete doneButton.onclick;
        delete cancelButton.onclick;
        dialog.parentNode.removeChild(dialog);
        return cb(value);
      };
      doneButton.onclick = function() {
        return done(input.value);
      };
      cancelButton.onclick = function() {
        return done(null);
      };
      return null;
    };
    _confirm = function() {
      var args, buttons, cb, center, dialog, label, value, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      cb = args.pop();
      label = args.shift();
      if (args.length > 0) {
        buttons = args;
      } else {
        buttons = {
          Yes: true,
          No: false
        };
      }
      _prompt_css();
      dialog = $.synth("div.prompt center\n	span '" + label + "' + br").appendTo("body");
      center = dialog.find('center');
      switch ($.type(buttons)) {
        case 'array':
        case 'bling':
          for (_i = 0, _len = buttons.length; _i < _len; _i++) {
            label = buttons[_i];
            $.synth("button[value=" + label + "] '" + label + "'").appendTo(center);
          }
          break;
        case 'object':
          for (label in buttons) {
            value = buttons[label];
            $.synth("button[value=" + value + "] '" + label + "'").appendTo(center);
          }
      }
      dialog.find("button").bind("click", function(evt) {
        dialog.remove();
        return cb(evt.target.getAttribute('value'));
      });
      return null;
    };
    return {
      $: {
        prompt: _prompt,
        confirm: _confirm
      }
    };
  });

  $.plugin({
    depends: "core",
    provides: "pubsub"
  }, function() {
    var Hub;
    Hub = (function() {
      function Hub() {
        this.listeners = {};
      }

      Hub.prototype.publish = function() {
        var args, caught, channel, err, listener, _base, _i, _len, _ref;
        channel = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        caught = null;
        _ref = (_base = this.listeners)[channel] || (_base[channel] = []);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          if (this.filter.apply(this, [listener].concat(__slice.call(args)))) {
            try {
              listener.apply(null, args);
            } catch (_error) {
              err = _error;
              if (caught == null) {
                caught = err;
              }
            }
          }
        }
        if (caught) {
          throw caught;
        }
        switch (args.length) {
          case 0:
            return null;
          case 1:
            return args[0];
          default:
            return args;
        }
      };

      Hub.prototype.filter = function(listener, message) {
        if ('patternObject' in listener) {
          return $.matches(listener.patternObject, message);
        }
        return true;
      };

      Hub.prototype.publisher = function(channel, func) {
        var t;
        t = this;
        return function() {
          return t.publish(channel, func.apply(this, arguments));
        };
      };

      Hub.prototype.subscribe = function() {
        var args, channel, func, _base;
        channel = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        func = args.pop();
        if (args.length > 0) {
          func.patternObject = args.pop();
        }
        ((_base = this.listeners)[channel] || (_base[channel] = [])).push(func);
        return func;
      };

      Hub.prototype.unsubscribe = function(channel, func) {
        var a, i, _base;
        if (func == null) {
          this.listeners[channel] = [];
        } else {
          a = ((_base = this.listeners)[channel] || (_base[channel] = []));
          if ((i = a.indexOf(func)) > -1) {
            a.splice(i, 1);
          }
        }
        return func;
      };

      return Hub;

    })();
    return {
      $: $.extend(new Hub(), {
        Hub: Hub
      })
    };
  });

  $.plugin({
    provides: 'random',
    depends: 'type'
  }, function() {
    var englishAlphabet, uuidAlphabet;
    englishAlphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    uuidAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    return {
      $: {
        random: (function() {
          var MT, a, b, coin, dice, die, gaussian, generate_numbers, index, init_generator, integer, next, real, string;
          MT = new Array(624);
          index = 0;
          init_generator = function(seed) {
            var i, _i, _results;
            index = 0;
            MT[0] = seed;
            _results = [];
            for (i = _i = 1; _i <= 623; i = ++_i) {
              _results.push(MT[i] = 0xFFFFFFFF & (1812433253 * (MT[i - 1] ^ (MT[i - 1] >>> 30)) + i));
            }
            return _results;
          };
          generate_numbers = function() {
            var i, y, _i, _results;
            _results = [];
            for (i = _i = 0; _i <= 623; i = ++_i) {
              y = ((MT[i] & 0x80000000) >>> 31) + (0x7FFFFFFF & MT[(i + 1) % 624]);
              MT[i] = MT[(i + 397) % 624] ^ (y >>> 1);
              if ((y % 2) === 1) {
                _results.push(MT[i] = MT[i] ^ 2567483615);
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
          a = Math.pow(2, 31);
          b = a * 2;
          next = function() {
            var y;
            if (index === 0) {
              generate_numbers();
            }
            y = MT[index] ^ (y >>> 11) ^ ((y << 7) && 2636928640) ^ ((y << 15) && 4022730752) ^ (y >>> 18);
            index = (index + 1) % 624;
            return (y + a) / b;
          };
          $.defineProperty(next, "seed", {
            set: function(v) {
              return init_generator(v);
            }
          });
          next.seed = +new Date();
          return $.extend(next, {
            real: real = function(min, max) {
              var _ref, _ref1;
              if (min == null) {
                _ref = [0, 1.0], min = _ref[0], max = _ref[1];
              }
              if (max == null) {
                _ref1 = [0, min], min = _ref1[0], max = _ref1[1];
              }
              return ($.random() * (max - min)) + min;
            },
            integer: integer = function(min, max) {
              return Math.floor($.random.real(min, max));
            },
            string: string = function(len, prefix, alphabet) {
              if (prefix == null) {
                prefix = "";
              }
              if (alphabet == null) {
                alphabet = englishAlphabet;
              }
              while (prefix.length < len) {
                prefix += $.random.element(alphabet);
              }
              return prefix;
            },
            coin: coin = function(balance) {
              if (balance == null) {
                balance = .5;
              }
              return $.random() <= balance;
            },
            element: function(arr, weights) {
              var i, item, r, sorted, sum, w, _i, _len;
              if (weights != null) {
                w = $(weights);
                w = w.scale(1.0 / w.sum());
                i = 0;
                sorted = $(arr).map(function(x) {
                  return {
                    v: x,
                    w: w[i++]
                  };
                }).sortBy(function(x) {
                  return -x.w;
                });
                r = $.random.real(0.00001, .999999);
                sum = 0;
                for (_i = 0, _len = sorted.length; _i < _len; _i++) {
                  item = sorted[_i];
                  if ((sum += item.w) >= r) {
                    return item.v;
                  }
                }
              }
              return arr[$.random.integer(0, arr.length)];
            },
            gaussian: gaussian = function(mean, ssig) {
              var q, u, v, x, y;
              if (mean == null) {
                mean = 0.5;
              }
              if (ssig == null) {
                ssig = 0.12;
              }
              while (true) {
                u = $.random();
                v = 1.7156 * ($.random() - 0.5);
                x = u - 0.449871;
                y = Math.abs(v) + 0.386595;
                q = (x * x) + y * (0.19600 * y - 0.25472 * x);
                if (!(q > 0.27597 && (q > 0.27846 || (v * v) > (-4 * Math.log(u) * u * u)))) {
                  break;
                }
              }
              return mean + ssig * v / u;
            },
            dice: dice = function(n, faces) {
              var _;
              return $((function() {
                var _i, _results;
                _results = [];
                for (_ = _i = 0; _i < n; _ = _i += 1) {
                  _results.push(die(faces));
                }
                return _results;
              })());
            },
            die: die = function(faces) {
              return $.random.integer(1, faces + 1);
            },
            uuid: function() {
              return $(8, 4, 4, 4, 12).map(function() {
                return $.random.string(this, '', uuidAlphabet);
              }).join('-');
            }
          });
        })()
      }
    };
  });

  $.plugin({
    provides: "render",
    depends: "promise"
  }, function() {
    var consume_forever, finalize, log, object_handlers, reduce, register, render;
    log = $.logger("[render]");
    consume_forever = function(promise, opts, p) {
      if (p == null) {
        p = $.Promise();
      }
      if (!$.is("promise", promise)) {
        return $.Promise().resolve(reduce(promise, opts));
      }
      promise.wait(function(err, result) {
        var r;
        r = reduce(result, opts);
        if ($.is('promise', r)) {
          return consume_forever(r, opts, p);
        } else {
          return p.resolve(r);
        }
      });
      return p;
    };
    render = function(o, opts) {
      var r;
      if (opts == null) {
        opts = {};
      }
      return consume_forever(r = reduce([o], opts), opts);
    };
    object_handlers = {
      text: function(o, opts) {
        var _ref;
        return reduce(o[(_ref = opts.lang) != null ? _ref : "EN"], opts);
      }
    };
    render.register = register = function(t, f) {
      return object_handlers[t] = f;
    };
    render.reduce = reduce = function(o, opts) {
      var finish_q, has_promises, i, m, n, p, q, t, x, _fn, _i, _len, _ref;
      switch (t = $.type(o)) {
        case "string":
        case "html":
          return o;
        case "null":
        case "undefined":
          return t;
        case "promise":
          q = $.Promise();
          o.wait(finish_q = function(err, result) {
            var r;
            if (err) {
              return q.reject(err);
            }
            if ($.is('promise', r = reduce(result, opts))) {
              return r.wait(finish_q);
            } else {
              return q.resolve(r);
            }
          });
          return q;
        case "number":
          return String(o);
        case "array":
        case "bling":
          p = $.Progress(m = 1);
          q = $.Promise();
          p.wait(function(err, result) {
            if (err) {
              return q.reject(err);
            } else {
              return q.resolve(finalize(n, opts));
            }
          });
          n = [];
          has_promises = false;
          _fn = function(x, i) {
            var finish_p, y;
            n[i] = y = reduce(x, opts);
            if ($.is('promise', y)) {
              has_promises = true;
              p.progress(null, ++m);
              return y.wait(finish_p = function(err, result) {
                var rp;
                if (err) {
                  return p.reject(err);
                }
                rp = reduce(result, opts);
                if ($.is('promise', rp)) {
                  return rp.wait(finish_p);
                } else {
                  return p.resolve(n[i] = rp);
                }
              });
            }
          };
          for (i = _i = 0, _len = o.length; _i < _len; i = ++_i) {
            x = o[i];
            _fn(x, i);
          }
          p.resolve(1);
          if (has_promises) {
            return q;
          } else {
            return finalize(n);
          }
          break;
        case "function":
          switch (f.length) {
            case 0:
            case 1:
              return reduce(f(opts));
            default:
              return $.Promise.wrap(f, opts);
          }
          break;
        case "object":
          if ((t = (_ref = o.t) != null ? _ref : o.type) in object_handlers) {
            return object_handlers[t].call(o, o, opts);
          } else {
            return "[ no handler for object type: '" + t + "' " + (JSON.stringify(o).substr(0, 20)) + "... ]";
          }
          break;
        default:
          return "[ cant reduce type: " + t + " ]";
      }
    };
    finalize = function(o, opts) {
      var t, x;
      switch (t = $.type(o)) {
        case "string":
        case "html":
          return o;
        case "number":
          return String(o);
        case "array":
        case "bling":
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              x = o[_i];
              _results.push(finalize(x));
            }
            return _results;
          })()).join('');
        case "null":
        case "undefined":
          return t;
        default:
          return "[ cant finalize type: " + t + " ]";
      }
    };
    register('link', function(o, opts) {
      var k;
      return [
        "<a", (function() {
          var _i, _len, _ref, _results;
          _ref = ["href", "name", "target"];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            if (k in this) {
              _results.push([" ", k, "='", this[k], "'"]);
            }
          }
          return _results;
        }).call(this), ">", reduce(this.content, opts), "</a>"
      ];
    });
    register('let', function(o, opts) {
      var save;
      save = opts[o.name];
      opts[o.name] = o.value;
      try {
        return reduce(o.content, opts);
      } finally {
        if (save === void 0) {
          delete opts[o.name];
        } else {
          opts[o.name] = save;
        }
      }
    });
    register('get', function(o, opts) {
      return reduce(opts[o.name], opts);
    });
    return {
      $: {
        render: render
      }
    };
  });

  $.plugin({
    depends: "core",
    provides: "request-queue"
  }, function() {
    var RequestQueue;
    return {
      $: {
        RequestQueue: RequestQueue = (function() {
          var stop;

          function RequestQueue(requester) {
            this.requester = (function() {
              if (requester != null) {
                return requester;
              } else {
                try {
                  return require('request');
                } catch (_error) {}
              }
            })();
            this.interval = null;
            this.queue = [];
          }

          RequestQueue.prototype.tick = function() {
            var i, n, _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = n = Math.min(this.queue.length, this.perTick); _i < _ref; i = _i += 1) {
              _results.push(this.requester.apply(this, this.queue.shift()));
            }
            return _results;
          };

          RequestQueue.prototype.start = function(perTick, interval) {
            this.perTick = perTick != null ? perTick : 1;
            if (interval == null) {
              interval = 100;
            }
            if (this.interval != null) {
              this.stop();
            }
            this.interval = setInterval(((function(_this) {
              return function() {
                return _this.tick();
              };
            })(this)), interval);
            return this;
          };

          RequestQueue.prototype.stop = stop = function() {
            clearInterval(this.interval);
            this.interval = null;
            return this;
          };

          RequestQueue.prototype.close = stop;

          RequestQueue.prototype.request = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            this.queue.push(args);
            return this;
          };

          RequestQueue.prototype.post = function(opts, callback) {
            if (callback == null) {
              callback = $.identity;
            }
            this.queue.push([
              $.extend(opts, {
                method: "POST"
              }), callback
            ]);
            return this;
          };

          RequestQueue.prototype.get = function(opts, callback) {
            if (callback == null) {
              callback = $.identity;
            }
            this.queue.push([
              $.extend(opts, {
                method: "GET"
              }), callback
            ]);
            return this;
          };

          return RequestQueue;

        })()
      }
    };
  });

  $.plugin({
    provides: "sendgrid",
    depends: "config"
  }, function() {
    var closeTransport, err, nodemailer, openTransport, transport;
    try {
      nodemailer = require('nodemailer');
    } catch (_error) {
      err = _error;
      return;
    }
    transport = null;
    openTransport = function() {
      return transport || (transport = nodemailer.createTransport('SMTP', {
        service: 'SendGrid',
        auth: {
          user: $.config.get('SENDGRID_USERNAME'),
          pass: $.config.get('SENDGRID_PASSWORD')
        }
      }));
    };
    closeTransport = function() {
      if (transport != null) {
        transport.close();
      }
      return transport = null;
    };
    return {
      $: {
        sendMail: function(mail, callback) {
          if (mail.transport == null) {
            mail.transport = openTransport();
          }
          if (mail.from == null) {
            mail.from = $.config.get('EMAILS_FROM');
          }
          if (mail.bcc == null) {
            mail.bcc = $.config.get('EMAILS_BCC');
          }
          if ($.config.get('SENDGRID_ENABLED', 'true') === 'true') {
            return nodemailer.sendMail(mail, function(err) {
              if (mail.close) {
                closeTransport();
              }
              return callback(err);
            });
          } else {
            if (mail.close) {
              closeTransport();
            }
            return callback(false);
          }
        }
      }
    };
  });

  $.plugin({
    provides: "sortBy,sortedIndex"
  }, function() {
    return {
      $: {
        sortedIndex: function(array, item, iterator, lo, hi) {
          var cmp, mid;
          if (lo == null) {
            lo = 0;
          }
          if (hi == null) {
            hi = array.length;
          }
          cmp = (function() {
            switch ($.type(iterator)) {
              case "string":
                return function(a, b) {
                  return a[iterator] < b[iterator];
                };
              case "function":
                return function(a, b) {
                  return iterator(a) < iterator(b);
                };
              default:
                return function(a, b) {
                  return a < b;
                };
            }
          })();
          while (lo < hi) {
            mid = (hi + lo) >>> 1;
            if (cmp(array[mid], item)) {
              lo = mid + 1;
            } else {
              hi = mid;
            }
          }
          return lo;
        }
      },
      sortBy: function(iterator) {
        var a, item, n, _i, _len;
        a = $();
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          item = this[_i];
          n = $.sortedIndex(a, item, iterator);
          a.splice(n, 0, item);
        }
        return a;
      },
      sortedInsert: function(item, iterator) {
        this.splice($.sortedIndex(this, item, iterator), 0, item);
        return this;
      }
    };
  });

  $.plugin({
    provides: "StateMachine",
    depends: "type"
  }, function() {
    var StateMachine;
    return {
      $: {
        StateMachine: StateMachine = (function() {
          var go;

          function StateMachine(stateTable) {
            this.debug = false;
            this.reset();
            this.table = stateTable;
            Object.defineProperty(this, "modeline", {
              get: function() {
                return this.table[this._mode];
              }
            });
            Object.defineProperty(this, "mode", {
              set: function(m) {
                var ret;
                this._lastMode = this._mode;
                this._mode = m;
                if (this._mode !== this._lastMode && (this.modeline != null) && 'enter' in this.modeline) {
                  ret = this.modeline['enter'].call(this);
                  while ($.is("function", ret)) {
                    ret = ret.call(this);
                  }
                }
                return m;
              },
              get: function() {
                return this._mode;
              }
            });
          }

          StateMachine.prototype.reset = function() {
            this._mode = null;
            return this._lastMode = null;
          };

          StateMachine.prototype.GO = go = function(m, enter) {
            if (enter == null) {
              enter = false;
            }
            return function() {
              if (enter) {
                this._mode = null;
              }
              return this.mode = m;
            };
          };

          StateMachine.GO = go;

          StateMachine.prototype.tick = function(c) {
            var ret, row;
            row = this.modeline;
            if (row == null) {
              ret = null;
            } else if (c in row) {
              ret = row[c];
            } else if ('def' in row) {
              ret = row['def'];
            }
            while ($.is("function", ret)) {
              ret = ret.call(this, c);
            }
            return ret;
          };

          StateMachine.prototype.run = function(inputs) {
            var c, ret, _i, _len, _ref;
            this.mode = 0;
            for (_i = 0, _len = inputs.length; _i < _len; _i++) {
              c = inputs[_i];
              ret = this.tick(c);
            }
            if ($.is("function", (_ref = this.modeline) != null ? _ref.eof : void 0)) {
              ret = this.modeline.eof.call(this);
            }
            while ($.is("function", ret)) {
              ret = ret.call(this);
            }
            this.reset();
            return this;
          };

          return StateMachine;

        })()
      }
    };
  });

  $.plugin({
    provides: "string",
    depends: "function"
  }, function() {
    var escape_single_quotes, safer, slugize;
    safer = function(f) {
      return function() {
        var a, err;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        try {
          return f.apply(null, a);
        } catch (_error) {
          err = _error;
          return "[Error: " + err.message + "]";
        }
      };
    };
    escape_single_quotes = function(s) {
      return s.replace(/([^\\]{1})'/g, "$1\\'");
    };
    $.type.extend({
      unknown: {
        string: safer(function(o) {
          var _ref;
          return (_ref = typeof o.toString === "function" ? o.toString() : void 0) != null ? _ref : String(o);
        }),
        repr: safer(function(o) {
          return $.type.lookup(o).string(o);
        }),
        number: safer(function(o) {
          return parseFloat(String(o));
        })
      },
      "null": {
        string: function() {
          return "null";
        }
      },
      undefined: {
        string: function() {
          return "undefined";
        }
      },
      string: {
        number: safer(parseFloat),
        repr: function(s) {
          return "'" + (escape_single_quotes(s)) + "'";
        }
      },
      array: {
        string: safer(function(a) {
          return "[" + (a.map($.toString).join(', ')) + "]";
        }),
        repr: safer(function(a) {
          return "[" + (a.map($.toRepr).join(', ')) + "]";
        })
      },
      "arguments": {
        string: safer(function(a) {
          var x;
          return "[" + (((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = a.length; _i < _len; _i++) {
              x = a[_i];
              _results.push($.toString(x));
            }
            return _results;
          })()).join(', ')) + "]";
        }),
        repr: safer(function(a) {
          var x;
          return "[" + (((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = a.length; _i < _len; _i++) {
              x = a[_i];
              _results.push($.toRepr(x));
            }
            return _results;
          })()).join(', ')) + "]";
        })
      },
      object: {
        string: safer(function(o) {
          var err, k, ret, v;
          ret = [];
          for (k in o) {
            try {
              v = o[k];
            } catch (_error) {
              err = _error;
              v = "[Error: " + err.message + "]";
            }
            ret.push("" + k + ":" + ($.toString(v)));
          }
          return "{" + ret.join(', ') + "}";
        }),
        repr: safer(function(o) {
          var err, k, ret, v;
          ret = [];
          for (k in o) {
            try {
              v = o[k];
            } catch (_error) {
              err = _error;
              v = "[Error: " + err.message + "]";
            }
            ret.push("\"" + k + "\": " + ($.toRepr(v)));
          }
          return "{" + ret.join(', ') + "}";
        })
      },
      "function": {
        repr: function(f) {
          return f.toString();
        },
        string: function(f) {
          return f.toString().replace(/^([^{]*){(?:.|\n|\r)*}$/, '$1{ ... }');
        }
      },
      number: {
        repr: function(n) {
          return String(n);
        },
        string: safer(function(n) {
          switch (false) {
            case n.precision == null:
              return n.toPrecision(n.precision);
            case n.fixed == null:
              return n.toFixed(n.fixed);
            default:
              return String(n);
          }
        })
      }
    });
    return {
      $: {
        toString: function(x) {
          var err;
          if (arguments.length === 0) {
            return "function Bling() { [ ... ] }";
          } else {
            try {
              return $.type.lookup(x).string(x);
            } catch (_error) {
              err = _error;
              return "[Error: " + err.message + "]";
            }
          }
        },
        toRepr: function(x) {
          return $.type.lookup(x).repr(x);
        },
        px: function(x, delta) {
          if (delta == null) {
            delta = 0;
          }
          return (x != null) && (parseInt(x, 10) + (parseInt(delta) | 0)) + "px";
        },
        capitalize: function(name) {
          return (name.split(" ").map(function(x) {
            return x[0].toUpperCase() + x.substring(1).toLowerCase();
          })).join(" ");
        },
        slugize: slugize = function(phrase, slug) {
          var k, v;
          if (slug == null) {
            slug = "-";
          }
          phrase = (function() {
            switch ($.type(phrase)) {
              case 'null':
              case 'undefined':
                return "";
              case 'object':
                return ((function() {
                  var _results;
                  _results = [];
                  for (k in phrase) {
                    v = phrase[k];
                    _results.push($.slugize(k, slug) + slug + $.slugize(v, slug));
                  }
                  return _results;
                })()).join(slug);
              case 'array':
              case 'bling':
                return phrase.map(function(item) {
                  return $.slugize(item, slug);
                }).join(slug);
              default:
                return String(phrase);
            }
          })();
          return phrase.toLowerCase().replace(/^\s+/, '').replace(/\s+$/, '').replace(/\t/g, ' ').replace(/[^A-Za-z0-9. -]/g, '').replace(/\s+/g, '-');
        },
        stubize: slugize,
        dashize: function(name) {
          var c, i, ret, _i, _ref;
          ret = "";
          for (i = _i = 0, _ref = (name != null ? name.length : void 0) | 0; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            c = name.charCodeAt(i);
            if ((91 > c && c > 64)) {
              c += 32;
              ret += '-';
            }
            ret += String.fromCharCode(c);
          }
          return ret;
        },
        camelize: function(name) {
          var i;
          name = $.slugize(name);
          name.split('-');
          while ((i = name != null ? name.indexOf('-') : void 0) > -1) {
            name = $.stringSplice(name, i, i + 2, name[i + 1].toUpperCase());
          }
          return name;
        },
        commaize: function(num, comma, dot, currency) {
          var a, b, s, sign, _ref;
          if (comma == null) {
            comma = ',';
          }
          if (dot == null) {
            dot = '.';
          }
          if (currency == null) {
            currency = '';
          }
          if ($.is('number', num)) {
            s = String(num);
            if (!isFinite(num)) {
              return s;
            }
            sign = num < 0 ? "-" : "";
            _ref = s.split('.'), a = _ref[0], b = _ref[1];
            if (a.length > 3) {
              a = $.stringReverse($.stringReverse(a).match(/\d{1,3}/g).join(comma));
            }
            return sign + currency + a + (b != null ? dot + b : "");
          }
        },
        padLeft: function(s, n, c) {
          if (c == null) {
            c = " ";
          }
          while (s.length < n) {
            s = c + s;
          }
          return s;
        },
        padRight: function(s, n, c) {
          if (c == null) {
            c = " ";
          }
          while (s.length < n) {
            s = s + c;
          }
          return s;
        },
        stringTruncate: function(s, n, c) {
          var r, x;
          if (c == null) {
            c = '...';
          }
          if (s.length <= n) {
            return s;
          }
          s = s.split(' ');
          r = [];
          while (n > 0) {
            x = s.shift();
            n -= x.length;
            if (n >= 0) {
              r.push(x);
            }
          }
          return r.join(' ') + c;
        },
        stringCount: function(s, x, i, n) {
          var j;
          if (i == null) {
            i = 0;
          }
          if (n == null) {
            n = 0;
          }
          if ((j = s.indexOf(x, i)) > i - 1) {
            return $.stringCount(s, x, j + 1, n + 1);
          } else {
            return n;
          }
        },
        stringSplice: function(s, i, j, n) {
          var end, nn, start;
          nn = s.length;
          end = j;
          if (end < 0) {
            end += nn;
          }
          start = i;
          if (start < 0) {
            start += nn;
          }
          return s.substring(0, start) + n + s.substring(end);
        },
        stringReverse: function(s) {
          return s.split('').reverse().join('');
        },
        checksum: function(s) {
          var a, b, i, _i, _ref;
          a = 1;
          b = 0;
          for (i = _i = 0, _ref = s.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            a = (a + s.charCodeAt(i)) % 65521;
            b = (b + a) % 65521;
          }
          return (b << 16) | a;
        },
        repeat: function(x, n) {
          if (n == null) {
            n = 2;
          }
          switch (false) {
            case n !== 1:
              return x;
            case !(n < 1):
              return "";
            case !$.is("string", x):
              return $.zeros(n, x).join('');
            default:
              return $.zeros(n, x);
          }
        },
        stringBuilder: (function() {
          var len;
          len = function(s) {
            return (s != null ? s.toString().length : void 0) | 0;
          };
          return function() {
            var items;
            if ($.is("global", this)) {
              return new $.stringBuilder();
            }
            items = [];
            return $.extend(this, {
              length: 0,
              append: (function(_this) {
                return function(s) {
                  items.push(s);
                  return _this.length += len(s);
                };
              })(this),
              prepend: (function(_this) {
                return function(s) {
                  items.splice(0, 0, s);
                  return _this.length += len(s);
                };
              })(this),
              clear: (function(_this) {
                return function() {
                  var ret;
                  ret = _this.toString();
                  items = [];
                  _this.length = 0;
                  return ret;
                };
              })(this),
              toString: function() {
                return items.join("");
              }
            });
          };
        })()
      },
      toString: function() {
        return $.toString(this);
      },
      toRepr: function() {
        return $.toRepr(this);
      },
      replace: function(patt, repl) {
        return this.map(function(s) {
          return s.replace(patt, repl);
        });
      },
      indexOf: function(target, offset) {
        var i, _i, _ref;
        if (offset == null) {
          offset = 0;
        }
        if ($.is('regexp', target)) {
          for (i = _i = offset, _ref = this.length; _i < _ref; i = _i += 1) {
            if (target.test(this[i])) {
              return i;
            }
          }
          return -1;
        } else {
          return Array.prototype.indexOf.apply(this, arguments);
        }
      }
    };
  });

  $.plugin({
    provides: "symbol",
    depends: "type"
  }, function() {
    var cache, g, symbol;
    symbol = null;
    cache = {};
    g = $.global;
    g.Bling = Bling;
    if (typeof module !== "undefined" && module !== null) {
      module.exports = Bling;
    }
    $.defineProperty($, "symbol", {
      set: function(v) {
        g[symbol] = cache[symbol];
        cache[symbol = v] = g[v];
        return g[v] = Bling;
      },
      get: function() {
        return symbol;
      }
    });
    return {
      $: {
        symbol: "$",
        noConflict: function() {
          Bling.symbol = "Bling";
          return Bling;
        }
      }
    };
  });

  $.plugin({
    provides: "synth",
    depends: "StateMachine, type"
  }, function() {
    var SynthMachine;
    SynthMachine = (function(_super) {
      var basic;

      __extends(SynthMachine, _super);

      basic = {
        "#": SynthMachine.GO(2),
        ".": SynthMachine.GO(3, true),
        "[": SynthMachine.GO(4),
        '"': SynthMachine.GO(6),
        "'": SynthMachine.GO(7),
        " ": SynthMachine.GO(8),
        "\t": SynthMachine.GO(8),
        "\n": SynthMachine.GO(8),
        "\r": SynthMachine.GO(8),
        ",": SynthMachine.GO(10),
        "+": SynthMachine.GO(11),
        eof: SynthMachine.GO(13)
      };

      SynthMachine.STATE_TABLE = [
        {
          enter: function() {
            this.tag = this.id = this.cls = this.attr = this.val = this.text = "";
            this.attrs = {};
            return this.GO(1);
          }
        }, $.extend({
          def: function(c) {
            return this.tag += c;
          }
        }, basic), $.extend({
          def: function(c) {
            return this.id += c;
          }
        }, basic), $.extend({
          enter: function() {
            if (this.cls.length > 0) {
              return this.cls += " ";
            }
          },
          def: function(c) {
            return this.cls += c;
          }
        }, basic), {
          "=": SynthMachine.GO(5),
          "]": function() {
            this.attrs[this.attr] = this.val;
            this.attr = this.val = "";
            return this.GO(1);
          },
          def: function(c) {
            return this.attr += c;
          },
          eof: SynthMachine.GO(12)
        }, {
          "]": function() {
            this.attrs[this.attr] = this.val;
            this.attr = this.val = "";
            return this.GO(1);
          },
          def: function(c) {
            return this.val += c;
          },
          eof: SynthMachine.GO(12)
        }, {
          '"': SynthMachine.GO(8),
          def: function(c) {
            return this.text += c;
          },
          eof: SynthMachine.GO(12)
        }, {
          "'": SynthMachine.GO(8),
          def: function(c) {
            return this.text += c;
          },
          eof: SynthMachine.GO(12)
        }, {
          enter: function() {
            if (this.tag) {
              this.emitNode();
            }
            if (this.text) {
              this.emitText();
            }
            return this.GO(0);
          }
        }, {}, {
          enter: function() {
            this.emitNode();
            this.cursor = null;
            return this.GO(0);
          }
        }, {
          enter: function() {
            var _ref;
            this.emitNode();
            this.cursor = (_ref = this.cursor) != null ? _ref.parentNode : void 0;
            return this.GO(0);
          }
        }, {
          enter: function() {
            throw new Error("Error in synth expression: " + this.input);
          }
        }, {
          enter: function() {
            if (this.tag) {
              this.emitNode();
            }
            if (this.text) {
              return this.emitText();
            }
          }
        }
      ];

      function SynthMachine() {
        SynthMachine.__super__.constructor.call(this, SynthMachine.STATE_TABLE);
        this.fragment = this.cursor = document.createDocumentFragment();
      }

      SynthMachine.prototype.emitNode = function() {
        var k, node;
        if (this.tag) {
          node = document.createElement(this.tag);
          if (this.id) {
            node.id = this.id;
          }
          if (this.cls) {
            node.className = this.cls;
          }
          for (k in this.attrs) {
            node.setAttribute(k, this.attrs[k]);
          }
          this.cursor.appendChild(node);
          return this.cursor = node;
        }
      };

      SynthMachine.prototype.emitText = function() {
        this.cursor.appendChild($.type.lookup("<html>").node(this.text));
        return this.text = "";
      };

      return SynthMachine;

    })($.StateMachine);
    return {
      $: {
        synth: function(expr) {
          var s;
          s = new SynthMachine();
          s.run(expr);
          if (s.fragment.childNodes.length === 1) {
            return $(s.fragment.childNodes[0]);
          } else {
            return $(s.fragment);
          }
        }
      }
    };
  });

  $.plugin({
    depends: "StateMachine",
    provides: "template"
  }, function() {
    var current_engine, engines, match_forward, template;
    current_engine = null;
    engines = {};
    template = {
      register_engine: function(name, render_func) {
        engines[name] = render_func;
        if (current_engine == null) {
          return current_engine = name;
        }
      },
      render: function(text, args) {
        if (current_engine in engines) {
          return engines[current_engine](text, args);
        }
      }
    };
    template.__defineSetter__('engine', function(v) {
      if (!v in engines) {
        throw new Error("invalid template engine: " + v + " not one of " + (Object.Keys(engines)));
      } else {
        return current_engine = v;
      }
    });
    template.__defineGetter__('engine', function() {
      return current_engine;
    });
    template.register_engine('null', (function() {
      return function(text, values) {
        return text;
      };
    })());
    match_forward = function(text, find, against, start, stop) {
      var count, i, t, _i;
      if (stop == null) {
        stop = -1;
      }
      count = 1;
      if (stop < 0) {
        stop = text.length + 1 + stop;
      }
      for (i = _i = start; _i < stop; i = _i += 1) {
        t = text[i];
        if (t === against) {
          count += 1;
        } else if (t === find) {
          count -= 1;
        }
        if (count === 0) {
          return i;
        }
      }
      return -1;
    };
    template.register_engine('pythonic', (function() {
      var chunk_re, compile, render, type_re;
      type_re = /([0-9#0+-]*)\.*([0-9#+-]*)([diouxXeEfFgGcrsqm])((?:.|\n)*)/;
      chunk_re = /%[\(\/]/;
      compile = function(text) {
        var chunks, end, i, j, key, match, n, rest, ret, _i;
        chunks = text.split(chunk_re);
        n = chunks.length;
        ret = [chunks[0]];
        j = 1;
        for (i = _i = 1; _i < n; i = _i += 1) {
          end = match_forward(chunks[i], ')', '(', 0, -1);
          if (end === -1) {
            return "Template syntax error: unmatched '%(' starting at: " + (chunks[i].substring(0, 15));
          }
          key = chunks[i].substring(0, end);
          rest = chunks[i].substring(end);
          match = type_re.exec(rest);
          if (match === null) {
            return "Template syntax error: invalid type specifier starting at '" + rest + "'";
          }
          rest = match[4];
          ret[j++] = key;
          ret[j++] = match[1] | 0;
          ret[j++] = match[2] | 0;
          ret[j++] = match[3];
          ret[j++] = rest;
        }
        return ret;
      };
      compile.cache = {};
      render = function(text, values) {
        var cache, fixed, i, j, key, n, output, pad, rest, type, value, _i, _ref, _ref1;
        cache = compile.cache[text];
        if (cache == null) {
          cache = compile.cache[text] = compile(text);
        }
        output = [cache[0]];
        j = 1;
        n = cache.length;
        for (i = _i = 1, _ref = n - 5; _i <= _ref; i = _i += 5) {
          _ref1 = cache.slice(i, +(i + 4) + 1 || 9e9), key = _ref1[0], pad = _ref1[1], fixed = _ref1[2], type = _ref1[3], rest = _ref1[4];
          value = values[key];
          if (value == null) {
            value = "missing value: " + key;
          }
          switch (type) {
            case 'd':
              output[j++] = "" + parseInt(value, 10);
              break;
            case 'f':
              output[j++] = parseFloat(value).toFixed(fixed);
              break;
            case 's':
              output[j++] = "" + value;
              break;
            default:
              output[j++] = "" + value;
          }
          if (pad > 0) {
            output[j] = String.PadLeft(output[j], pad);
          }
          output[j++] = rest;
        }
        return output.join("");
      };
      return render;
    })());
    template.register_engine('js-eval', (function() {
      var TemplateMachine;
      TemplateMachine = (function(_super) {
        __extends(TemplateMachine, _super);

        function TemplateMachine() {
          return TemplateMachine.__super__.constructor.apply(this, arguments);
        }

        TemplateMachine.STATE_TABLE = [
          {
            enter: function() {
              this.data = [];
              return this.GO(1);
            }
          }, {}
        ];

        return TemplateMachine;

      })($.StateMachine);
      return function(text, values) {
        return text;
      };
    })());
    return {
      $: {
        template: template
      }
    };
  });

  $.plugin({
    provides: "throttle",
    depends: "core"
  }, function() {
    return {
      $: {
        throttle: function(ms, f) {
          var last;
          last = 0;
          return function() {
            var a, gap;
            a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            gap = $.now - last;
            if (gap > ms) {
              last += gap;
              return f.apply(this, a);
            }
            return null;
          };
        },
        debounce: function(ms, f) {
          var timeout;
          timeout = null;
          return function() {
            var a;
            a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            clearTimeout(timeout);
            return setTimeout(((function(_this) {
              return function() {
                return f.apply(_this, arguments);
              };
            })(this)), ms);
          };
        }
      }
    };
  });

  $.plugin({
    depends: 'type',
    provides: 'TNET'
  }, function() {
    var Symbols, Types, class_index, classes, makeFunction, packOne, register, unpackOne;
    Types = {
      "number": {
        symbol: "#",
        pack: String,
        unpack: Number
      },
      "string": {
        symbol: "'",
        pack: $.identity,
        unpack: $.identity
      },
      "bool": {
        symbol: "!",
        pack: function(b) {
          return String(!!b);
        },
        unpack: function(s) {
          return s === "true";
        }
      },
      "null": {
        symbol: "~",
        pack: function() {
          return "";
        },
        unpack: function() {
          return null;
        }
      },
      "undefined": {
        symbol: "_",
        pack: function() {
          return "";
        },
        unpack: function() {
          return void 0;
        }
      },
      "array": {
        symbol: "]",
        pack: function(a) {
          var y;
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = a.length; _i < _len; _i++) {
              y = a[_i];
              _results.push(packOne(y));
            }
            return _results;
          })()).join('');
        },
        unpack: function(s) {
          var data, one, _ref;
          data = [];
          while (s.length > 0) {
            _ref = unpackOne(s), one = _ref[0], s = _ref[1];
            data.push(one);
          }
          return data;
        }
      },
      "bling": {
        symbol: "$",
        pack: function(a) {
          var y;
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = a.length; _i < _len; _i++) {
              y = a[_i];
              _results.push(packOne(y));
            }
            return _results;
          })()).join('');
        },
        unpack: function(s) {
          var data, one, _ref;
          data = $();
          while (s.length > 0) {
            _ref = unpackOne(s), one = _ref[0], s = _ref[1];
            data.push(one);
          }
          return data;
        }
      },
      "object": {
        symbol: "}",
        pack: function(o) {
          var k, v;
          return ((function() {
            var _results;
            _results = [];
            for (k in o) {
              v = o[k];
              if (k !== "constructor" && o.hasOwnProperty(k)) {
                _results.push(packOne(k) + packOne(v));
              }
            }
            return _results;
          })()).join('');
        },
        unpack: function(s) {
          var data, key, value, _ref, _ref1;
          data = {};
          while (s.length > 0) {
            _ref = unpackOne(s), key = _ref[0], s = _ref[1];
            _ref1 = unpackOne(s), value = _ref1[0], s = _ref1[1];
            data[key] = value;
          }
          return data;
        }
      },
      "function": {
        symbol: ")",
        pack: function(f) {
          var args, body, name, name_re, s, _ref;
          s = f.toString().replace(/(?:\n|\r)+\s*/g, ' ');
          name = "";
          name_re = /function\s*(\w+)\(.*/g;
          if (name_re.test(s)) {
            name = s.replace(name_re, "$1");
          }
          _ref = s.replace(/function\s*\w*\(/, '').replace(/\/\*.*\*\//g, '').replace(/}$/, '').split(/\) {/), args = _ref[0], body = _ref[1];
          args = args.split(/, */);
          body = body.replace(/^\s+/, '').replace(/\s*$/, '');
          return $(name, args, body).map(packOne).join('');
        },
        unpack: function(s) {
          var args, body, name, rest, _ref, _ref1, _ref2;
          _ref = unpackOne(s), name = _ref[0], rest = _ref[1];
          _ref1 = unpackOne(rest), args = _ref1[0], rest = _ref1[1];
          _ref2 = unpackOne(rest), body = _ref2[0], rest = _ref2[1];
          return makeFunction(name, args.join(), body);
        }
      },
      "regexp": {
        symbol: "/",
        pack: function(r) {
          return String(r).slice(1, -1);
        },
        unpack: function(s) {
          return RegExp(s);
        }
      },
      "class instance": {
        symbol: "C",
        pack: function(o) {
          if (!('constructor' in o)) {
            throw new Error("TNET: cant pack non-class as class");
          }
          if (!(o.constructor in class_index)) {
            throw new Error("TNET: cant pack unregistered class (name: " + o.constructor.name);
          }
          return packOne(class_index[o.constructor]) + packOne(o, "object");
        },
        unpack: function(s) {
          var i, obj, rest, _ref, _ref1;
          _ref = unpackOne(s), i = _ref[0], rest = _ref[1];
          _ref1 = unpackOne(rest), obj = _ref1[0], rest = _ref1[1];
          if (i <= classes.length) {
            obj.__proto__ = classes[i - 1].prototype;
          } else {
            throw new Error("TNET: attempt to unpack unregistered class index: " + i);
          }
          return obj;
        }
      }
    };
    makeFunction = function(name, args, body) {
      eval("var f = function " + name + "(" + args + "){" + body + "}");
      return f;
    };
    classes = [];
    class_index = {};
    register = function(klass) {
      return class_index[klass] || (class_index[klass] = classes.push(klass));
    };
    Symbols = {};
    (function() {
      var t, v, _results;
      _results = [];
      for (t in Types) {
        v = Types[t];
        _results.push(Symbols[v.symbol] = v);
      }
      return _results;
    })();
    unpackOne = function(data) {
      var i, x, _ref;
      if (data == null) {
        return data;
      }
      if ((i = data.indexOf(":")) > 0) {
        x = i + 1 + parseInt(data.slice(0, i), 10);
        return [(_ref = Symbols[data[x]]) != null ? _ref.unpack(data.slice(i + 1, x)) : void 0, data.slice(x + 1)];
      }
      return void 0;
    };
    packOne = function(x, forceType) {
      var data, t, tx, _ref;
      if (forceType != null) {
        tx = forceType;
      } else {
        tx = $.type(x);
        if (tx === "object" && ((_ref = x.constructor) != null ? _ref.name : void 0) !== "Object") {
          tx = "class instance";
        }
      }
      if ((t = Types[tx]) == null) {
        throw new Error("TNET: dont know how to pack type '" + tx + "'");
      }
      data = t.pack(x);
      return data.length + ":" + data + t.symbol;
    };
    return {
      $: {
        TNET: {
          Types: Types,
          registerClass: register,
          stringify: packOne,
          parse: function(x) {
            var _ref;
            return (_ref = unpackOne(x)) != null ? _ref[0] : void 0;
          }
        }
      }
    };
  });

  $.plugin({
    provides: "trace",
    depends: "function,type"
  }, function() {
    var time;
    $.type.extend({
      unknown: {
        trace: $.identity
      },
      object: {
        trace: function(label, o, tracer) {
          var k, _i, _len, _ref;
          _ref = Object.keys(o);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            o[k] = $.trace(o[k], "" + label + "." + k, tracer);
          }
          return o;
        }
      },
      array: {
        trace: function(label, o, tracer) {
          var i, _i, _ref;
          for (i = _i = 0, _ref = o.length; _i < _ref; i = _i += 1) {
            o[i] = $.trace(o[i], "" + label + "[" + i + "]", tracer);
          }
          return o;
        }
      },
      "function": {
        trace: function(label, f, tracer) {
          var r;
          label || (label = f.name);
          r = function() {
            var a, args, elapsed, start;
            a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            start = +(new Date);
            f.apply(this, a);
            label = "" + (this.name || $.type(this)) + "." + label;
            args = $(a).map($.toRepr).join(',');
            elapsed = (+(new Date) - start).toFixed(0);
            return tracer("" + label + "(" + args + "): " + elapsed + "ms");
          };
          r.toString = function() {
            return "{Trace '" + label + "' of " + (f.toString());
          };
          return r;
        }
      }
    });
    time = function(label, f, logger) {
      var ret, start, _ref;
      if (!$.is("string", label)) {
        _ref = [label, f, "trace"], f = _ref[0], logger = _ref[1], label = _ref[2];
      }
      if (!$.is("function", logger)) {
        logger = $.log;
      }
      start = +(new Date);
      ret = f();
      logger("[" + label + "] " + ((+(new Date) - start).toFixed(0)) + "ms");
      return ret;
    };
    return {
      $: {
        time: time,
        trace: function(label, o, tracer) {
          var _ref;
          if (!$.is("string", label)) {
            _ref = [o, label], tracer = _ref[0], o = _ref[1];
          }
          tracer || (tracer = $.log);
          label || (label = "");
          return $.type.lookup(o).trace(label, o, tracer);
        }
      }
    };
  });

  $.plugin({
    depends: "dom"
  }, function() {
    var COMMASEP, accel_props_re, speeds, testStyle, transformProperty, transitionDuration, transitionProperty, transitionTiming, updateDelay;
    COMMASEP = ", ";
    speeds = {
      "slow": 700,
      "medium": 500,
      "normal": 300,
      "fast": 100,
      "instant": 0,
      "now": 0
    };
    accel_props_re = /(?:scale(?:3d)*|translate(?:[XYZ]|3d)*|rotate(?:[XYZ]|3d)*)/;
    updateDelay = 30;
    testStyle = document.createElement("div").style;
    transformProperty = "transform";
    transitionProperty = "transition-property";
    transitionDuration = "transition-duration";
    transitionTiming = "transition-timing-function";
    if ("WebkitTransform" in testStyle) {
      transformProperty = "-webkit-transform";
      transitionProperty = "-webkit-transition-property";
      transitionDuration = "-webkit-transition-duration";
      transitionTiming = "-webkit-transition-timing-function";
    } else if ("MozTransform" in testStyle) {
      transformProperty = "-moz-transform";
      transitionProperty = "-moz-transition-property";
      transitionDuration = "-moz-transition-duration";
      transitionTiming = "-moz-transition-timing-function";
    } else if ("OTransform" in testStyle) {
      transformProperty = "-o-transform";
      transitionProperty = "-o-transition-property";
      transitionDuration = "-o-transition-duration";
      transitionTiming = "-o-transition-timing-function";
    }
    return {
      $: {
        duration: function(speed) {
          var d;
          d = speeds[speed];
          if (d != null) {
            return d;
          }
          return parseFloat(speed);
        }
      },
      transform: function(end_css, speed, easing, callback) {
        var css, duration, i, ii, props, trans;
        if ($.is("function", speed)) {
          callback = speed;
          speed = easing = null;
        } else if ($.is("function", easing)) {
          callback = easing;
          easing = null;
        }
        if (speed == null) {
          speed = "normal";
        }
        easing || (easing = "ease");
        duration = $.duration(speed) + "ms";
        props = [];
        trans = "";
        css = {};
        for (i in end_css) {
          if (accel_props_re.test(i)) {
            ii = end_css[i];
            if (ii.join) {
              ii = $(ii).px().join(COMMASEP);
            } else if (ii.toString) {
              ii = ii.toString();
            }
            trans += " " + i + "(" + ii + ")";
          } else {
            css[i] = end_css[i];
          }
        }
        for (i in css) {
          props.push(i);
        }
        if (trans) {
          props.push(transformProperty);
        }
        css[transitionProperty] = props.join(COMMASEP);
        css[transitionDuration] = props.map(function() {
          return duration;
        }).join(COMMASEP);
        css[transitionTiming] = props.map(function() {
          return easing;
        }).join(COMMASEP);
        if (trans) {
          css[transformProperty] = trans;
        }
        this.css(css);
        if (callback) {
          return this.delay(duration, $.bound(this, callback));
        }
      },
      hide: function(callback) {
        this.each(function() {
          if (this.style) {
            this._display = "";
            if (this.style.display === !"none") {
              this._display = this.syle.display;
            }
            return this.style.display = "none";
          }
        }).trigger("hide");
        if (callback) {
          this.delay(updateDelay, $.bound(this, callback));
        }
        return this;
      },
      show: function(callback) {
        this.each(function() {
          if (this.style) {
            this.style.display = this._display;
            return delete this._display;
          }
        }).trigger("show");
        if (callback) {
          this.delay(updateDelay, $.bound(this, callback));
        }
        return this;
      },
      toggle: function(callback) {
        return this.weave(this.css("display")).fold(function(display, node) {
          if (display === "none") {
            node.style.display = node._display || "";
            delete node._display;
            $(node).trigger("show");
          } else {
            node._display = display;
            node.style.display = "none";
            $(node).trigger("hide");
          }
          return node;
        }).delay(updateDelay, $.bound(this, callback));
      },
      fadeIn: function(speed, callback) {
        return this.css('opacity', '0.0').show(function() {
          return this.transform({
            opacity: "1.0",
            translate3d: [0, 0, 0]
          }, speed, callback);
        });
      },
      fadeOut: function(speed, callback, x, y) {
        if (x == null) {
          x = 0.0;
        }
        if (y == null) {
          y = 0.0;
        }
        return this.transform({
          opacity: "0.0",
          translate3d: [x, y, 0.0]
        }, speed, function() {
          return this.hide($.bound(this, callback));
        });
      },
      fadeLeft: function(speed, callback) {
        return this.fadeOut(speed, callback, "-" + this.width().first(), 0.0);
      },
      fadeRight: function(speed, callback) {
        return this.fadeOut(speed, callback, this.width().first(), 0.0);
      },
      fadeUp: function(speed, callback) {
        return this.fadeOut(speed, callback, 0.0, "-" + this.height().first());
      },
      fadeDown: function(speed, callback) {
        return this.fadeOut(speed, callback, 0.0, this.height().first());
      }
    };
  });

  $.plugin({
    provides: "type"
  }, function() {
    var inherit, isType, maxHash, _type;
    isType = function(T, o) {
      if (o == null) {
        return T === o || T === "null" || T === "undefined";
      } else {
        return ((o.constructor != null) && (o.constructor === T || o.constructor.name === T)) || Object.prototype.toString.apply(o) === ("[object " + T + "]") || isType(T, o.__proto__);
      }
    };
    inherit = function() {
      var obj, objs, parent, _ref;
      parent = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!(objs.length > 0)) {
        return;
      }
      obj = objs.shift();
      if (typeof parent === "function") {
        parent = parent.prototype;
      }
      if ((_ref = parent.__proto__) === Object.prototype || _ref === null || _ref === (void 0)) {
        parent.__proto__ = obj.__proto__;
      }
      obj.__proto__ = parent;
      if (objs.length > 0) {
        return inherit.apply(null, [obj].concat(__slice.call(objs)));
      } else {
        return obj;
      }
    };
    _type = (function() {
      var base, cache, lookup, order, register, _extend, _with_cache, _with_insert;
      cache = {};
      base = {
        name: 'unknown',
        is: function(o) {
          return true;
        }
      };
      order = [];
      _with_cache = {};
      _with_insert = function(method, type) {
        var a, i;
        a = (_with_cache[method] || (_with_cache[method] = []));
        if ((i = a.indexOf(type)) === -1) {
          return a.push(type);
        }
      };
      register = function(name, data) {
        var key, _results;
        if (!('is' in data)) {
          throw new Error("$.type.register given a second argument without an 'is' function");
        }
        if (!(name in cache)) {
          order.unshift(name);
        }
        cache[data.name = name] = base !== data ? inherit(base, data) : data;
        cache[name][name] = function(o) {
          return o;
        };
        _results = [];
        for (key in cache[name]) {
          _results.push(_with_insert(key, cache[name]));
        }
        return _results;
      };
      _extend = function(name, data) {
        var k, method, _results, _results1;
        if (typeof name === "string") {
          cache[name] || (cache[name] = register(name, {}));
          cache[name] = extend(cache[name], data);
          _results = [];
          for (method in data) {
            _results.push(_with_insert(method, cache[name]));
          }
          return _results;
        } else if (typeof name === "object") {
          _results1 = [];
          for (k in name) {
            _results1.push(_extend(k, name[k]));
          }
          return _results1;
        }
      };
      lookup = function(obj) {
        var name, _i, _len, _ref;
        for (_i = 0, _len = order.length; _i < _len; _i++) {
          name = order[_i];
          if ((_ref = cache[name]) != null ? _ref.is.call(obj, obj) : void 0) {
            return cache[name];
          }
        }
      };
      register("unknown", base);
      register("object", {
        is: function(o) {
          return typeof o === "object";
        }
      });
      register("error", {
        is: function(o) {
          return isType('Error', o);
        }
      });
      register("regexp", {
        is: function(o) {
          return isType('RegExp', o);
        }
      });
      register("string", {
        is: function(o) {
          return typeof o === "string" || isType(String, o);
        }
      });
      register("number", {
        is: function(o) {
          return (isType(Number, o)) && o !== NaN;
        }
      });
      register("bool", {
        is: function(o) {
          return typeof o === "boolean" || (function() {
            var _ref;
            try {
              return (_ref = String(o)) === "true" || _ref === "false";
            } catch (_error) {}
          })();
        }
      });
      register("array", {
        is: Array.isArray || function(o) {
          return isType(Array, o);
        }
      });
      register("function", {
        is: function(o) {
          return typeof o === "function";
        }
      });
      register("global", {
        is: function(o) {
          return typeof o === "object" && 'setInterval' in this;
        }
      });
      register("arguments", {
        is: function(o) {
          try {
            return 'callee' in o && 'length' in o;
          } catch (_error) {}
        }
      });
      register("undefined", {
        is: function(x) {
          return x === void 0;
        }
      });
      register("null", {
        is: function(x) {
          return x === null;
        }
      });
      return extend((function(o) {
        return lookup(o).name;
      }), {
        register: register,
        lookup: lookup,
        extend: _extend,
        get: function(t) {
          return cache[t];
        },
        is: function(t, o) {
          var _ref;
          return (_ref = cache[t]) != null ? _ref.is.call(o, o) : void 0;
        },
        as: function() {
          var o, rest, t, _base;
          t = arguments[0], o = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          return typeof (_base = lookup(o))[t] === "function" ? _base[t].apply(_base, [o].concat(__slice.call(rest))) : void 0;
        },
        "with": function(f) {
          var _ref;
          return (_ref = _with_cache[f]) != null ? _ref : [];
        }
      });
    })();
    _type.extend({
      unknown: {
        array: function(o) {
          return [o];
        }
      },
      "null": {
        array: function(o) {
          return [];
        }
      },
      undefined: {
        array: function(o) {
          return [];
        }
      },
      array: {
        array: function(o) {
          return o;
        }
      },
      number: {
        array: function(o) {
          return Bling.extend(new Array(o), {
            length: 0
          });
        }
      },
      "arguments": {
        array: function(o) {
          return Array.prototype.slice.apply(o);
        }
      }
    });
    maxHash = Math.pow(2, 32);
    _type.register("bling", {
      is: function(o) {
        return o && isType(Bling, o);
      },
      array: function(o) {
        return o.toArray();
      },
      hash: function(o) {
        return o.map(Bling.hash).reduce(function(a, x) {
          return ((a * a) + x) % maxHash;
        });
      },
      string: function(o) {
        return Bling.symbol + "([" + o.map(function(x) {
          return $.type.lookup(x).string(x);
        }).join(", ") + "])";
      },
      repr: function(o) {
        return Bling.symbol + "([" + o.map(function(x) {
          return $.type.lookup(x).repr(x);
        }).join(", ") + "])";
      }
    });
    return {
      $: {
        inherit: inherit,
        extend: extend,
        defineProperty: function(o, name, opts) {
          Object.defineProperty(o, name, extend({
            configurable: true,
            enumerable: true
          }, opts));
          return o;
        },
        isType: isType,
        type: _type,
        is: _type.is,
        as: _type.as,
        isDefined: function(o) {
          return o != null;
        },
        isSimple: function(o) {
          var _ref;
          return (_ref = _type(o)) === "string" || _ref === "number" || _ref === "bool";
        },
        isEmpty: function(o) {
          return (o === "" || o === null || o === (void 0)) || o.length === 0 || (typeof o === "object" && Object.keys(o).length === 0);
        }
      },
      defineProperty: function(name, opts) {
        return this.each(function() {
          return $.defineProperty(this, name, opts);
        });
      }
    };
  });

  $.plugin({
    depends: 'math',
    provides: 'units'
  }, function() {
    var UNIT_RE, conv, convertNumber, fillConversions, initialize, locker, makeUnitRegex, parseUnits, setConversion, units;
    units = $(["px", "pt", "pc", "em", "%", "in", "cm", "mm", "ex", "lb", "kg", "yd", "ft", "m", ""]);
    UNIT_RE = null;
    (makeUnitRegex = function() {
      var joined;
      joined = units.filter(/.+/).join('|');
      return UNIT_RE = new RegExp("(\\d+\\.*\\d*)((?:" + joined + ")/*(?:" + joined + ")*)$");
    })();
    parseUnits = function(s) {
      if (UNIT_RE.test(s)) {
        return UNIT_RE.exec(s)[2];
      }
      return "";
    };
    conv = function(a, b) {
      var denom_a, denom_b, numer_a, numer_b, _ref, _ref1;
      _ref = a.split('/'), numer_a = _ref[0], denom_a = _ref[1];
      _ref1 = b.split('/'), numer_b = _ref1[0], denom_b = _ref1[1];
      if ((denom_a != null) && (denom_b != null)) {
        return conv(denom_b, denom_a) * conv(numer_a, numer_b);
      }
      if (a in conv && (b in conv[a])) {
        return conv[a][b]();
      }
      return 0;
    };
    locker = function(x) {
      return function() {
        return x;
      };
    };
    fillConversions = function() {};
    setConversion = function(from, to, f) {
      conv[from] || (conv[from] = {});
      conv[from][to] = f;
      if (units.indexOf(from) === -1) {
        units.push(from);
      }
      if (units.indexOf(to) === -1) {
        units.push(to);
      }
      makeUnitRegex();
      return fillConversions();
    };
    initialize = function() {
      setConversion('pc', 'pt', function() {
        return 12;
      });
      setConversion('in', 'pt', function() {
        return 72;
      });
      setConversion('in', 'px', function() {
        return 96;
      });
      setConversion('in', 'cm', function() {
        return 2.54;
      });
      setConversion('m', 'ft', function() {
        return 3.281;
      });
      setConversion('yd', 'ft', function() {
        return 3;
      });
      setConversion('cm', 'mm', function() {
        return 10;
      });
      setConversion('m', 'cm', function() {
        return 100;
      });
      setConversion('m', 'meter', function() {
        return 1;
      });
      setConversion('m', 'meters', function() {
        return 1;
      });
      setConversion('ft', 'feet', function() {
        return 1;
      });
      setConversion('km', 'm', function() {
        return 1000;
      });
      setConversion('em', 'px', function() {
        var w, x;
        w = 0;
        try {
          x = $("<span style='font-size:1em;visibility:hidden'>x</span>").appendTo("body");
          w = x.width().first();
          x.remove();
        } catch (_error) {}
        return w;
      });
      setConversion('ex', 'px', function() {
        var w, x;
        w = 0;
        try {
          x = $("<span style='font-size:1ex;visibility:hidden'>x</span>").appendTo("body");
          w = x.width().first();
          x.remove();
        } catch (_error) {}
        return w;
      });
      setConversion('ex', 'em', function() {
        return 2;
      });
      setConversion('rad', 'deg', function() {
        return 57.3;
      });
      setConversion('s', 'sec', function() {
        return 1;
      });
      setConversion('s', 'ms', function() {
        return 1000;
      });
      setConversion('ms', 'ns', function() {
        return 1000000;
      });
      setConversion('min', 'sec', function() {
        return 60;
      });
      setConversion('hr', 'min', function() {
        return 60;
      });
      setConversion('hr', 'hour', function() {
        return 1;
      });
      setConversion('hr', 'hours', function() {
        return 1;
      });
      setConversion('day', 'hr', function() {
        return 24;
      });
      setConversion('day', 'days', function() {
        return 1;
      });
      setConversion('y', 'year', function() {
        return 1;
      });
      setConversion('y', 'years', function() {
        return 1;
      });
      setConversion('y', 'd', function() {
        return 365.25;
      });
      setConversion('g', 'gram', function() {
        return 1;
      });
      setConversion('g', 'grams', function() {
        return 1;
      });
      setConversion('kg', 'g', function() {
        return 1000;
      });
      setConversion('lb', 'g', function() {
        return 453.6;
      });
      setConversion('lb', 'oz', function() {
        return 16;
      });
      setConversion('f', 'frame', function() {
        return 1;
      });
      setConversion('f', 'frames', function() {
        return 1;
      });
      setConversion('sec', 'f', function() {
        return 60;
      });
      (fillConversions = function() {
        var a, b, c, infered, one, _i, _j, _k, _l, _len, _len1, _len2, _len3;
        conv[''] = {};
        one = locker(1.0);
        for (_i = 0, _len = units.length; _i < _len; _i++) {
          a = units[_i];
          conv[a] || (conv[a] = {});
          conv[a][a] = conv[a][''] = conv[''][a] = one;
        }
        infered = 1;
        while (infered > 0) {
          infered = 0;
          for (_j = 0, _len1 = units.length; _j < _len1; _j++) {
            a = units[_j];
            if (!(a !== '')) {
              continue;
            }
            conv[a] || (conv[a] = {});
            for (_k = 0, _len2 = units.length; _k < _len2; _k++) {
              b = units[_k];
              if (!(b !== '')) {
                continue;
              }
              if ((!conv(a, b)) && (conv(b, a))) {
                conv[a][b] = locker(1.0 / conv(b, a));
                infered += 1;
              }
              for (_l = 0, _len3 = units.length; _l < _len3; _l++) {
                c = units[_l];
                if (c !== '') {
                  if ((conv(a, b)) && (conv(b, c)) && (!conv(a, c))) {
                    conv[a][c] = locker(conv(a, b) * conv(b, c));
                    infered += 1;
                  }
                }
              }
            }
          }
        }
        return null;
      })();
      return $.units.enable = function() {};
    };
    convertNumber = function(number, unit) {
      var c, f, u;
      f = parseFloat(number);
      u = parseUnits(number);
      c = conv(u, unit);
      if (!(isFinite(c) && isFinite(f))) {
        return number;
      }
      return "" + (f * c) + unit;
    };
    $.type.register("units", {
      is: function(x) {
        return typeof x === "string" && UNIT_RE.test(x);
      },
      number: function(x) {
        return parseFloat(x);
      },
      string: function(x) {
        return "'" + x + "'";
      }
    });
    return {
      $: {
        units: {
          enable: initialize,
          set: setConversion,
          get: conv,
          convertTo: function(unit, obj) {
            return convertNumber(obj, unit);
          }
        }
      },
      convertTo: function(unit) {
        return this.map(function(x) {
          return convertNumber(x, unit);
        });
      },
      unitMap: function(f) {
        return this.map(function(x) {
          var n;
          return f.call((n = parseFloat(x)), n) + parseUnits(x);
        });
      }
    };
  });

  $.plugin({
    provides: "url,URL"
  }, function() {
    var clean, parse, stringify, url_re;
    url_re = /\b(?:([a-z+]+):)(?:\/{1,2}([^?\/#]*?))(?::(\d+))*(\/[^?]*)*(?:\?([^#]+))*(?:#([^\s]+))*$/i;
    parse = function(str, parseQuery) {
      var i, m, pair, query, ret, _i, _len, _ref, _ref1, _ref2, _ref3;
      if (parseQuery == null) {
        parseQuery = false;
      }
      ret = (m = str != null ? str.match(url_re) : void 0) ? {
        protocol: m[1],
        host: m[2],
        port: m[3],
        path: m[4],
        query: (_ref = m[5]) != null ? _ref.replace(/^\?/, '') : void 0,
        hash: (_ref1 = m[6]) != null ? _ref1.replace(/^#/, '') : void 0
      } : null;
      if ((ret != null) && parseQuery) {
        query = (_ref2 = ret.query) != null ? _ref2 : "";
        ret.query = Object.create(null);
        _ref3 = query.split('&');
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          pair = _ref3[_i];
          if ((i = pair.indexOf('=')) > -1) {
            ret.query[pair.substring(0, i)] = unescape(pair.substring(i + 1));
          } else if (pair.length > 0) {
            ret.query[pair] = null;
          }
        }
        delete ret.query[""];
      }
      return ret;
    };
    clean = function(val, re, prefix, suffix) {
      var x;
      if (prefix == null) {
        prefix = '';
      }
      if (suffix == null) {
        suffix = '';
      }
      x = val != null ? val : "";
      if (x && !re.test(x)) {
        return prefix + x + suffix;
      } else {
        return x;
      }
    };
    stringify = function(url) {
      var k, v;
      if ($.is('object', url.query)) {
        url.query = ((function() {
          var _ref, _results;
          _ref = url.query;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push("" + k + "=" + v);
          }
          return _results;
        })()).join("&");
      }
      return [clean(url.protocol, /:$/, '', ':'), clean(url.host, /^\//, '//'), clean(url.port, /^:/, ':'), clean(url.path, /^\//, '/'), clean(url.query, /^\?/, '?'), clean(url.hash, /^#/, '#')].join('');
    };
    return {
      $: {
        URL: {
          parse: parse,
          stringify: stringify
        }
      }
    };
  });

  $.plugin({
    depends: 'dialog',
    provides: 'wizard'
  }, function() {
    return {
      $: {
        wizard: function() {
          var currentSlide, d, dialogs, modal, slide, slideChanger, slides, _i, _len, _ref, _ref1;
          slides = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (slides.length === 1 && ((_ref = $.type(slides[0])) === 'array' || _ref === 'bling')) {
            slides = slides[0];
          }
          currentSlide = 0;
          modal = $.dialog(slides[0]).select('parentNode');
          dialogs = [];
          slideChanger = function(delta) {
            switch (slides.length) {
              case 0:
                return $.identity;
              default:
                return function() {
                  var currentDialog, newDialog, newLeft, newSlide, width;
                  newSlide = (currentSlide + delta) % slides.length;
                  while (newSlide < 0) {
                    newSlide += slides.length;
                  }
                  if (newSlide === currentSlide) {
                    return;
                  }
                  $.log("slideChange: " + currentSlide + " -> " + newSlide);
                  currentDialog = $(dialogs[currentSlide]);
                  newDialog = $(dialogs[newSlide]);
                  width = currentDialog.width()[0];
                  newLeft = delta < 0 ? window.innerWidth - width : -(width + 10);
                  $.log("newLeft: " + ($.px(newLeft)) + " (delta: " + delta + ")");
                  currentDialog.removeClass('wiz-active').css({
                    left: $.px(newLeft)
                  }).fadeOut();
                  newDialog.addClass('wiz-active').css({
                    opacity: 0,
                    display: 'block'
                  }).centerOn(modal).fadeIn();
                  return currentSlide = newSlide;
                };
            }
          };
          modal.delegate('.wiz-next', 'click', slideChanger(+1));
          modal.delegate('.wiz-back', 'click', slideChanger(-1));
          if ($("style.dialog").length === 0) {
            $.synth("style").text;
          }
          _ref1 = slides.slice(1);
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            slide = _ref1[_i];
            slide = $.extend($.dialog.getDefaultOptions(), slide);
            d = $.synth('div.dialog#' + slide.id + ' div.title + div.content').css({
              left: $.px(window.innerWidth)
            });
            d.find('.title').append($.dialog.getContent(slide.titleType, slide.title));
            d.find('.content').append($.dialog.getContent(slide.contentType, slide.content));
            d.appendTo(modal).fadeOut(0);
          }
          dialogs = modal.find('.dialog');
          dialogs.take(1).show();
          return modal;
        }
      }
    };
  });

}).call(this);

//# sourceMappingURL=bling.map
